[{"/Users/gracielaalaniz/Documents/cloudflare-build/src/index.jsx":"1","/Users/gracielaalaniz/Documents/cloudflare-build/src/App.jsx":"2","/Users/gracielaalaniz/Documents/cloudflare-build/src/locations/ConfigScreen.jsx":"3","/Users/gracielaalaniz/Documents/cloudflare-build/src/locations/Sidebar.jsx":"4"},{"size":344,"mtime":1680573393051,"results":"5","hashOfConfig":"6"},{"size":714,"mtime":1681155489093,"results":"7","hashOfConfig":"6"},{"size":4404,"mtime":1681155723095,"results":"8","hashOfConfig":"6"},{"size":4584,"mtime":1681159553839,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"5k52a4",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/gracielaalaniz/Documents/cloudflare-build/src/index.jsx",[],[],[],"/Users/gracielaalaniz/Documents/cloudflare-build/src/App.jsx",[],[],"/Users/gracielaalaniz/Documents/cloudflare-build/src/locations/ConfigScreen.jsx",["25"],[],"import React, { useCallback, useState, useEffect } from 'react';\nimport { Heading, Form, FormControl, TextInput, Flex } from '@contentful/f36-components';\nimport { css } from 'emotion';\nimport { useSDK } from '@contentful/react-apps-toolkit';\n\nconst ConfigScreen = () => {\n  const sdk = useSDK();\n  const [parameters, setParameters] = useState({});\n  const [fields, setFields] = useState([\n    {\n      type: 'text',\n      name: 'cb_account_id',\n      label: 'Account Identifier',\n      helpText: 'Example: 023e105f4ecef8ad9ca31a8372d0c353',\n      required: true\n    },\n    {\n      type: 'email',\n      name: 'cb_account_email',\n      label: 'Account Email',\n      required: true\n    },\n    {\n      type: 'text',\n      name: 'cb_api_key',\n      label: 'API Key',\n      required: true\n    },\n    {\n      type: 'text',\n      name: 'cb_api_proxy',\n      label: 'API Proxy',\n      required: true\n    },\n    {\n      type: 'text',\n      name: 'cb_project_name',\n      label: 'Project Name',\n      helpText: 'Example: this-is-my-project-01',\n      required: true\n    }\n  ])\n\n  const onConfigure = useCallback(async () => {\n    // This method will be called when a user clicks on 'Install'\n    // or 'Save' in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await sdk.app.getCurrentState();\n    \n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  }, [parameters, sdk]);\n\n  useEffect(() => {\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    sdk.app.onConfigure(() => onConfigure());\n  }, [sdk, onConfigure]);\n\n  useEffect(() => {\n    (async () => {\n      // Get current parameters of the app.\n      // If the app is not installed yet, `parameters` will be `null`.\n      const currentParameters = await sdk.app.getParameters();\n\n      if (currentParameters) {\n        let currentFields = [...fields];\n\n        currentFields = currentFields.map((f) => {\n          const { name } = f;\n\n          if (Object.getOwnPropertyDescriptor(currentParameters, name)) {\n            f.value = currentParameters[name];\n          }\n\n          return f;\n        })\n\n        setParameters(currentParameters);\n        setFields(currentFields);\n      }\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      sdk.app.setReady();\n    })();\n  }, [sdk]);\n\n  return (\n    <Flex flexDirection=\"column\" className={css({ margin: '80px', maxWidth: '800px' })}>\n      <Form>\n        <Heading>Cloudflare Build Config</Heading>\n        {fields.map((field) => {\n          const {\n            type = 'text',\n            required = false,\n            helpText = '',\n            value = '',\n            name,\n            label\n          } = field;\n\n          if (!name || !label) {\n            return '';\n          }\n\n          return (\n            <FormControl key={name} isRequired={required}>\n              <FormControl.Label>{label}</FormControl.Label>\n              <TextInput\n                value={value}\n                type={type}\n                name={name}\n                onChange={(e) => {\n                  const currentValue = e.target.value;\n                  let currentFields = [...fields];\n                  let currentParams = {...parameters};\n\n                  currentParams[name] = currentValue;\n\n                  currentFields = currentFields.map((f) => {\n                    if (f.name === name) {\n                      f.value = currentValue;\n                    }\n\n                    return f;\n                  })\n\n                  setFields(currentFields);\n                  setParameters(currentParams);\n                }}\n              />\n              {helpText && (\n                <FormControl.HelpText>{helpText}</FormControl.HelpText>\n              )}\n            </FormControl>\n          );\n        })}\n      </Form>\n    </Flex>\n  );\n};\n\nexport default ConfigScreen;\n",[],"/Users/gracielaalaniz/Documents/cloudflare-build/src/locations/Sidebar.jsx",[],[],{"ruleId":"26","severity":1,"message":"27","line":95,"column":6,"nodeType":"28","endLine":95,"endColumn":11,"suggestions":"29"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fields'. Either include it or remove the dependency array.","ArrayExpression",["30"],{"desc":"31","fix":"32"},"Update the dependencies array to be: [fields, sdk]",{"range":"33","text":"34"},[2856,2861],"[fields, sdk]"]