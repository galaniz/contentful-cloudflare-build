{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport a from 'react';\nimport { Button } from '@contentful/f36-button';\nimport { Select } from '@contentful/f36-forms';\nimport { Flex, Stack } from '@contentful/f36-core';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@contentful/f36-icons';\nimport { Text } from '@contentful/f36-typography';\nvar O = Object.defineProperty;\nvar m = Object.getOwnPropertySymbols;\nvar h = Object.prototype.hasOwnProperty,\n  C = Object.prototype.propertyIsEnumerable;\nvar b = function b(t, n, e) {\n    return n in t ? O(t, n, {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: e\n    }) : t[n] = e;\n  },\n  d = function d(t, n) {\n    for (var e in n || (n = {})) h.call(n, e) && b(t, e, n[e]);\n    if (m) {\n      var _iterator = _createForOfIteratorHelper(m(n)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var e = _step.value;\n          C.call(n, e) && b(t, e, n[e]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    return t;\n  };\nvar w = function w(t, n) {\n  var e = {};\n  for (var o in t) h.call(t, o) && n.indexOf(o) < 0 && (e[o] = t[o]);\n  if (t != null && m) {\n    var _iterator2 = _createForOfIteratorHelper(m(t)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var o = _step2.value;\n        n.indexOf(o) < 0 && C.call(t, o) && (e[o] = t[o]);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return e;\n};\nfunction l(_ref) {\n  var t = _ref.activePage,\n    n = _ref.itemsPerPage,\n    _ref$totalItems = _ref.totalItems,\n    e = _ref$totalItems === void 0 ? 0 : _ref$totalItems,\n    o = _ref.pageLength,\n    _ref$isLastPage = _ref.isLastPage,\n    p = _ref$isLastPage === void 0 ? !1 : _ref$isLastPage;\n  var g = e ? \"of \".concat(e, \" items\") : \"\",\n    i = t * n + 1;\n  if (p && o) return [\"\".concat(i, \" - \").concat(i - 1 + o), g].join(\" \");\n  if (e) {\n    var P = Math.min(i - 1 + n, e);\n    return [\"\".concat(i, \" - \").concat(P), g].join(\" \");\n  }\n  return [\"\".concat(i, \" - \").concat(i - 1 + n), g].join(\" \");\n}\nfunction L(t, n) {\n  var v = t,\n    e = v.className,\n    o = v.onPageChange,\n    _v$testId = v.testId,\n    p = _v$testId === void 0 ? \"cf-ui-pagination\" : _v$testId,\n    g = v.activePage,\n    _v$itemsPerPage = v.itemsPerPage,\n    i = _v$itemsPerPage === void 0 ? 20 : _v$itemsPerPage,\n    P = v.pageLength,\n    _v$isLastPage = v.isLastPage,\n    S = _v$isLastPage === void 0 ? !1 : _v$isLastPage,\n    _v$activePage = v.activePage,\n    r = _v$activePage === void 0 ? 0 : _v$activePage,\n    _v$viewPerPageOptions = v.viewPerPageOptions,\n    $ = _v$viewPerPageOptions === void 0 ? [20, 100] : _v$viewPerPageOptions,\n    _v$showViewPerPage = v.showViewPerPage,\n    k = _v$showViewPerPage === void 0 ? !1 : _v$showViewPerPage,\n    f = v.totalItems,\n    c = v.onViewPerPageChange,\n    j = w(v, [\"className\", \"onPageChange\", \"testId\", \"activePage\", \"itemsPerPage\", \"pageLength\", \"isLastPage\", \"activePage\", \"viewPerPageOptions\", \"showViewPerPage\", \"totalItems\", \"onViewPerPageChange\"]),\n    V = r === 0,\n    x = S || f && (r + 1) * i >= f,\n    N = l({\n      totalItems: f,\n      activePage: r,\n      itemsPerPage: i,\n      pageLength: P,\n      isLastPage: x\n    });\n  return a.createElement(Flex, d({\n    flexDirection: \"row\",\n    justifyContent: \"space-between\",\n    fullWidth: !0,\n    className: e,\n    testId: p,\n    ref: n\n  }, j), k && a.createElement(Stack, null, a.createElement(Text, {\n    fontColor: \"gray500\"\n  }, \"View\"), a.createElement(Select, {\n    value: \"\".concat(i),\n    onChange: function onChange(s) {\n      return c && c(+s.target.value);\n    }\n  }, $.map(function (s) {\n    return a.createElement(Select.Option, {\n      key: s,\n      value: s\n    }, s);\n  }))), a.createElement(Stack, {\n    flexGrow: 1,\n    justifyContent: \"flex-end\"\n  }, a.createElement(Text, {\n    fontColor: \"gray500\"\n  }, N), a.createElement(Stack, {\n    spacing: \"spacingS\"\n  }, !V && a.createElement(Button, {\n    \"aria-label\": \"To previous page\",\n    startIcon: a.createElement(ChevronLeftIcon, null),\n    variant: \"secondary\",\n    onClick: function onClick() {\n      return o(r - 1);\n    },\n    testId: \"cf-ui-pagination-previous\"\n  }, \"Previous\"), !x && a.createElement(Button, {\n    \"aria-label\": \"To next page\",\n    variant: \"secondary\",\n    endIcon: a.createElement(ChevronRightIcon, null),\n    onClick: function onClick() {\n      return o(r + 1);\n    },\n    testId: \"cf-ui-pagination-next\"\n  }, \"Next\"))));\n}\nL.displayName = \"Pagination\";\nvar M = a.forwardRef(L);\nexport { M as Pagination, l as getRangeText };","map":{"version":3,"names":[],"sources":["/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-pagination/src/Pagination.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-pagination/src/utils.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Button } from '@contentful/f36-button';\nimport { Select } from '@contentful/f36-forms';\nimport { Stack, Flex, type CommonProps } from '@contentful/f36-core';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@contentful/f36-icons';\nimport { Text } from '@contentful/f36-typography';\n\nimport { getRangeText } from './utils';\n\nexport interface PaginationProps extends CommonProps {\n  /**\n   * Sets which page is active on the Pagination\n   * @default 0\n   */\n  activePage?: number;\n  /**\n   * Sets if the user is on the last page of navigation\n   * @default false\n   */\n  isLastPage?: boolean;\n  /**\n   * Number of items are actually on the page.\n   * If no value is set it defaults to viewPerPage value\n   * @default 20\n   */\n  pageLength?: number;\n  /**\n   * Total amount of items the pagination is applied to.\n   */\n  totalItems?: number;\n  /**\n   * Sets if the View per page selector is shown\n   * @default false\n   */\n  showViewPerPage?: boolean;\n  /**\n   * Sets how many items are displayed per page.\n   * Must be one of the values passed on viewPerPageOptions prop.\n   * @default 20\n   */\n  itemsPerPage?: number;\n  /**\n   * Array of options to show on the View select\n   * @default [20, 100]\n   */\n  viewPerPageOptions?: number[];\n  /**\n   * Handler function called when user changes the view per page selector.\n   */\n  onViewPerPageChange?: (items: number) => void;\n  /**\n   * Handler function called when user navigates to another page on the pagination.\n   */\n  onPageChange: (page: number) => void;\n}\n\nfunction _Pagination(props: PaginationProps, ref: React.Ref<HTMLDivElement>) {\n  const {\n    className,\n    onPageChange,\n    testId = 'cf-ui-pagination',\n    activePage: propsActivePage,\n    itemsPerPage = 20,\n    pageLength,\n    isLastPage: propsLastPage = false,\n    activePage = 0,\n    viewPerPageOptions = [20, 100],\n    showViewPerPage = false,\n    totalItems,\n    onViewPerPageChange,\n    ...otherProps\n  } = props;\n  const isFirstPage = activePage === 0;\n  const isLastPage =\n    propsLastPage ||\n    (totalItems && (activePage + 1) * itemsPerPage >= totalItems);\n  const totalText = getRangeText({\n    totalItems,\n    activePage,\n    itemsPerPage,\n    pageLength,\n    isLastPage,\n  });\n\n  return (\n    <Flex\n      flexDirection=\"row\"\n      justifyContent=\"space-between\"\n      fullWidth\n      className={className}\n      testId={testId}\n      ref={ref}\n      {...otherProps}\n    >\n      {showViewPerPage && (\n        <Stack>\n          <Text fontColor=\"gray500\">View</Text>\n          <Select\n            value={`${itemsPerPage}`}\n            onChange={(e) =>\n              onViewPerPageChange && onViewPerPageChange(+e.target.value)\n            }\n          >\n            {viewPerPageOptions.map((option) => (\n              <Select.Option key={option} value={option}>\n                {option}\n              </Select.Option>\n            ))}\n          </Select>\n        </Stack>\n      )}\n      <Stack flexGrow={1} justifyContent=\"flex-end\">\n        <Text fontColor=\"gray500\">{totalText}</Text>\n        <Stack spacing=\"spacingS\">\n          {!isFirstPage && (\n            <Button\n              aria-label=\"To previous page\"\n              startIcon={<ChevronLeftIcon />}\n              variant=\"secondary\"\n              onClick={() => onPageChange(activePage - 1)}\n              testId=\"cf-ui-pagination-previous\"\n            >\n              Previous\n            </Button>\n          )}\n          {!isLastPage && (\n            <Button\n              aria-label=\"To next page\"\n              variant=\"secondary\"\n              endIcon={<ChevronRightIcon />}\n              onClick={() => onPageChange(activePage + 1)}\n              testId=\"cf-ui-pagination-next\"\n            >\n              Next\n            </Button>\n          )}\n        </Stack>\n      </Stack>\n    </Flex>\n  );\n}\n\n_Pagination.displayName = 'Pagination';\n\nexport const Pagination = React.forwardRef(_Pagination);\n","export function getRangeText({\n  activePage,\n  itemsPerPage,\n  totalItems = 0,\n  pageLength,\n  isLastPage = false,\n}: {\n  activePage: number;\n  itemsPerPage: number;\n  totalItems?: number;\n  pageLength?: number;\n  isLastPage?: boolean;\n}): string {\n  const total = totalItems ? `of ${totalItems} items` : '';\n  const firstItem = activePage * itemsPerPage + 1;\n  if (isLastPage && pageLength) {\n    return [`${firstItem} - ${firstItem - 1 + pageLength}`, total].join(' ');\n  }\n  if (totalItems) {\n    const lastItem = Math.min(firstItem - 1 + itemsPerPage, totalItems);\n    return [`${firstItem} - ${lastItem}`, total].join(' ');\n  }\n  return [`${firstItem} - ${firstItem - 1 + itemsPerPage}`, total].join(' ');\n}\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}