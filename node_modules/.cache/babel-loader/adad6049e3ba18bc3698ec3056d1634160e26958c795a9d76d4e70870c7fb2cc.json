{"ast":null,"code":"var _jsxFileName = \"/Users/gracielaalaniz/Documents/cloudflare-build/src/locations/ConfigScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { Heading, Form, FormControl, TextInput, Flex } from '@contentful/f36-components';\nimport { css } from 'emotion';\nimport { /* useCMA, */useSDK } from '@contentful/react-apps-toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfigScreen = () => {\n  _s();\n  const [parameters, setParameters] = useState({});\n  const [value, setValue] = useState(\"\");\n  const sdk = useSDK();\n  /*\n     To use the cma, inject it as follows.\n     If it is not needed, you can remove the next line.\n  */\n  // const cma = useCMA();\n  const onConfigure = useCallback(async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await sdk.app.getCurrentState();\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState\n    };\n  }, [parameters, sdk]);\n  useEffect(() => {\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    sdk.app.onConfigure(() => onConfigure());\n  }, [sdk, onConfigure]);\n  useEffect(() => {\n    (async () => {\n      // Get current parameters of the app.\n      // If the app is not installed yet, `parameters` will be `null`.\n      const currentParameters = await sdk.app.getParameters();\n      if (currentParameters) {\n        setParameters(currentParameters);\n      }\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      sdk.app.setReady();\n    })();\n  }, [sdk]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    className: css({\n      margin: '80px',\n      maxWidth: '800px'\n    }),\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        children: \"Cloudflare Build Config\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        isRequired: true,\n        children: [/*#__PURE__*/_jsxDEV(FormControl.Label, {\n          children: \"Account Identifier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n          value: value,\n          type: \"text\",\n          name: \"account_id\",\n          onChange: e => setValue(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(FormControl.HelpText, {\n          children: \"Example: 023e105f4ecef8ad9ca31a8372d0c353\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_s(ConfigScreen, \"xiDikhjpwCVkQbxcQeT4trOPtZ0=\", false, function () {\n  return [useSDK];\n});\n_c = ConfigScreen;\nexport default ConfigScreen;\nvar _c;\n$RefreshReg$(_c, \"ConfigScreen\");","map":{"version":3,"names":["React","useCallback","useState","useEffect","Heading","Form","FormControl","TextInput","Flex","css","useSDK","jsxDEV","_jsxDEV","ConfigScreen","_s","parameters","setParameters","value","setValue","sdk","onConfigure","currentState","app","getCurrentState","targetState","currentParameters","getParameters","setReady","flexDirection","className","margin","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","isRequired","Label","type","name","onChange","e","target","HelpText","_c","$RefreshReg$"],"sources":["/Users/gracielaalaniz/Documents/cloudflare-build/src/locations/ConfigScreen.jsx"],"sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\nimport { Heading, Form, FormControl, TextInput, Flex } from '@contentful/f36-components';\nimport { css } from 'emotion';\nimport { /* useCMA, */ useSDK } from '@contentful/react-apps-toolkit';\n\nconst ConfigScreen = () => {\n  const [parameters, setParameters] = useState({});\n  const [value, setValue] = useState(\"\");\n  const sdk = useSDK();\n  /*\n     To use the cma, inject it as follows.\n     If it is not needed, you can remove the next line.\n  */\n  // const cma = useCMA();\n  const onConfigure = useCallback(async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await sdk.app.getCurrentState();\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  }, [parameters, sdk]);\n\n  useEffect(() => {\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    sdk.app.onConfigure(() => onConfigure());\n  }, [sdk, onConfigure]);\n\n  useEffect(() => {\n    (async () => {\n      // Get current parameters of the app.\n      // If the app is not installed yet, `parameters` will be `null`.\n      const currentParameters = await sdk.app.getParameters();\n      if (currentParameters) {\n        setParameters(currentParameters);\n      }\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      sdk.app.setReady();\n    })();\n  }, [sdk]);\n\n  return (\n    <Flex flexDirection=\"column\" className={css({ margin: '80px', maxWidth: '800px' })}>\n      <Form>\n        <Heading>Cloudflare Build Config</Heading>\n        <FormControl isRequired>\n          <FormControl.Label>Account Identifier</FormControl.Label>\n          <TextInput\n            value={value}\n            type=\"text\"\n            name=\"account_id\"\n            onChange={(e) => setValue(e.target.value)}\n          />\n          <FormControl.HelpText>Example: 023e105f4ecef8ad9ca31a8372d0c353</FormControl.HelpText>\n        </FormControl>\n      </Form>\n    </Flex>\n  );\n};\nexport default ConfigScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}