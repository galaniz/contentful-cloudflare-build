{"ast":null,"code":"var _jsxFileName = \"/Users/gracielaalaniz/Documents/cloudflare-build/src/locations/ConfigScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useRef, useState, useEffect } from 'react';\nimport { Heading, Form, FormControl, TextInput, Flex } from '@contentful/f36-components';\nimport { css } from 'emotion';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfigScreen = () => {\n  _s();\n  const [parameters, setParameters] = useState({});\n  const [fields, setFields] = useState([{\n    type: \"text\",\n    name: \"cb_account_id\",\n    label: \"Account Identifier\",\n    helpText: \"Example: 023e105f4ecef8ad9ca31a8372d0c353\",\n    required: true\n  }, {\n    type: \"email\",\n    name: \"cb_account_email\",\n    label: \"Account Email\",\n    required: true\n  }, {\n    type: \"text\",\n    name: \"cb_api_key\",\n    label: \"API Key\",\n    required: true\n  }, {\n    type: \"text\",\n    name: \"cb_api_proxy_url\",\n    label: \"API Proxy URL\",\n    required: true\n  }, {\n    type: \"text\",\n    name: \"cb_project_name\",\n    label: \"Project Name\",\n    helpText: \"Example: this-is-my-project-01\",\n    required: true\n  }]);\n  const fieldValues = useRef({});\n  const sdk = useSDK();\n  const onConfigure = useCallback(async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await sdk.app.getCurrentState();\n    console.log(\"SAVE\", currentState, fieldValues);\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: fieldValues.current,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState\n    };\n  }, [parameters, sdk]);\n  useEffect(() => {\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    sdk.app.onConfigure(() => onConfigure());\n  }, [sdk, onConfigure]);\n  useEffect(() => {\n    (async () => {\n      // Get current parameters of the app.\n      // If the app is not installed yet, `parameters` will be `null`.\n      const currentParameters = await sdk.app.getParameters();\n      if (currentParameters) {\n        let currentFields = [...fields];\n        currentFields = currentFields.map(f => {\n          const {\n            name\n          } = f;\n          if (Object.getOwnPropertyDescriptor(currentParameters, name)) {\n            f.value = currentParameters[name];\n          }\n          return f;\n        });\n        console.log(\"LOAD\", currentParameters, currentFields);\n        setParameters(currentParameters);\n        setFields(currentFields);\n      }\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      sdk.app.setReady();\n    })();\n  }, [sdk]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    className: css({\n      margin: '80px',\n      maxWidth: '800px'\n    }),\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        children: \"Cloudflare Build Config\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), fields.map(field => {\n        const {\n          type = \"text\",\n          required = false,\n          helpText = \"\",\n          value = \"\",\n          name,\n          label\n        } = field;\n        console.log(\"FIELD\", field);\n        if (!name || !label) {\n          return \"\";\n        }\n        return /*#__PURE__*/_jsxDEV(FormControl, {\n          isRequired: required,\n          children: [/*#__PURE__*/_jsxDEV(FormControl.Label, {\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            defaultValue: value,\n            type: type,\n            name: name,\n            onBlur: e => {\n              const values = {\n                ...fieldValues.current\n              };\n              values[name] = e.target.value;\n              fieldValues.current = values;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), helpText && /*#__PURE__*/_jsxDEV(FormControl.HelpText, {\n            children: helpText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this)]\n        }, name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n_s(ConfigScreen, \"kwY+QXhJwWU30nlWUW1zUhppkkA=\", false, function () {\n  return [useSDK];\n});\n_c = ConfigScreen;\nexport default ConfigScreen;\nvar _c;\n$RefreshReg$(_c, \"ConfigScreen\");","map":{"version":3,"names":["React","useCallback","useRef","useState","useEffect","Heading","Form","FormControl","TextInput","Flex","css","useSDK","jsxDEV","_jsxDEV","ConfigScreen","_s","parameters","setParameters","fields","setFields","type","name","label","helpText","required","fieldValues","sdk","onConfigure","currentState","app","getCurrentState","console","log","current","targetState","currentParameters","getParameters","currentFields","map","f","Object","getOwnPropertyDescriptor","value","setReady","flexDirection","className","margin","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","field","isRequired","Label","defaultValue","onBlur","e","values","target","HelpText","_c","$RefreshReg$"],"sources":["/Users/gracielaalaniz/Documents/cloudflare-build/src/locations/ConfigScreen.jsx"],"sourcesContent":["import React, { useCallback, useRef, useState, useEffect } from 'react';\nimport { Heading, Form, FormControl, TextInput, Flex } from '@contentful/f36-components';\nimport { css } from 'emotion';\nimport { useSDK } from '@contentful/react-apps-toolkit';\n\nconst ConfigScreen = () => {\n  const [parameters, setParameters] = useState({});\n  const [fields, setFields] = useState([\n    {\n      type: \"text\",\n      name: \"cb_account_id\",\n      label: \"Account Identifier\",\n      helpText: \"Example: 023e105f4ecef8ad9ca31a8372d0c353\",\n      required: true\n    },\n    {\n      type: \"email\",\n      name: \"cb_account_email\",\n      label: \"Account Email\",\n      required: true\n    },\n    {\n      type: \"text\",\n      name: \"cb_api_key\",\n      label: \"API Key\",\n      required: true\n    },\n    {\n      type: \"text\",\n      name: \"cb_api_proxy_url\",\n      label: \"API Proxy URL\",\n      required: true\n    },\n    {\n      type: \"text\",\n      name: \"cb_project_name\",\n      label: \"Project Name\",\n      helpText: \"Example: this-is-my-project-01\",\n      required: true\n    }\n  ])\n  const fieldValues = useRef({});\n  const sdk = useSDK();\n\n  const onConfigure = useCallback(async () => {\n    // This method will be called when a user clicks on \"Install\"\n    // or \"Save\" in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await sdk.app.getCurrentState();\n\n    console.log(\"SAVE\", currentState, fieldValues);\n    \n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters: fieldValues.current,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  }, [parameters, sdk]);\n\n  useEffect(() => {\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    sdk.app.onConfigure(() => onConfigure());\n  }, [sdk, onConfigure]);\n\n  useEffect(() => {\n    (async () => {\n      // Get current parameters of the app.\n      // If the app is not installed yet, `parameters` will be `null`.\n      const currentParameters = await sdk.app.getParameters();\n\n      if (currentParameters) {\n        let currentFields = [...fields];\n\n        currentFields = currentFields.map((f) => {\n          const { name } = f;\n\n          if (Object.getOwnPropertyDescriptor(currentParameters, name)) {\n            f.value = currentParameters[name];\n          }\n\n          return f;\n        })\n\n        console.log(\"LOAD\", currentParameters, currentFields);\n\n        setParameters(currentParameters);\n        setFields(currentFields);\n      }\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      sdk.app.setReady();\n    })();\n  }, [sdk]);\n\n  return (\n    <Flex flexDirection=\"column\" className={css({ margin: '80px', maxWidth: '800px' })}>\n      <Form>\n        <Heading>Cloudflare Build Config</Heading>\n        {fields.map((field) => {\n          const {\n            type = \"text\",\n            required = false,\n            helpText = \"\",\n            value = \"\",\n            name,\n            label\n          } = field;\n\n          console.log(\"FIELD\", field);\n\n          if (!name || !label) {\n            return \"\";\n          }\n\n          return (\n            <FormControl key={name} isRequired={required}>\n              <FormControl.Label>{label}</FormControl.Label>\n              <TextInput\n                defaultValue={value}\n                type={type}\n                name={name}\n                onBlur={(e) => {\n                  const values = {...fieldValues.current};\n\n                  values[name] = e.target.value;\n\n                  fieldValues.current = values;\n                }}\n              />\n              {helpText && (\n                <FormControl.HelpText>{helpText}</FormControl.HelpText>\n              )}\n            </FormControl>\n          );\n        })}\n      </Form>\n    </Flex>\n  );\n};\nexport default ConfigScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}