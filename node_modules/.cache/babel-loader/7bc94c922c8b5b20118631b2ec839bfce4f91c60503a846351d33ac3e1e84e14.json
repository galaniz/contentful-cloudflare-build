{"ast":null,"code":"import _defineProperty from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { cx, css } from 'emotion';\nimport c from 'react';\nimport { Stack, Box, Flex } from '@contentful/f36-core';\nimport o from '@contentful/f36-tokens';\nimport { Spinner } from '@contentful/f36-spinner';\nvar to = Object.defineProperty,\n  eo = Object.defineProperties;\nvar ro = Object.getOwnPropertyDescriptors;\nvar P = Object.getOwnPropertySymbols;\nvar G = Object.prototype.hasOwnProperty,\n  A = Object.prototype.propertyIsEnumerable;\nvar D = function D(t, e, r) {\n    return e in t ? to(t, e, {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: r\n    }) : t[e] = r;\n  },\n  i = function i(t, e) {\n    for (var r in e || (e = {})) G.call(e, r) && D(t, r, e[r]);\n    if (P) {\n      var _iterator = _createForOfIteratorHelper(P(e)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var r = _step.value;\n          A.call(e, r) && D(t, r, e[r]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    return t;\n  },\n  B = function B(t, e) {\n    return eo(t, ro(e));\n  };\nvar y = function y(t, e) {\n  var r = {};\n  for (var n in t) G.call(t, n) && e.indexOf(n) < 0 && (r[n] = t[n]);\n  if (t != null && P) {\n    var _iterator2 = _createForOfIteratorHelper(P(t)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var n = _step2.value;\n        e.indexOf(n) < 0 && A.call(t, n) && (r[n] = t[n]);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return r;\n};\nvar no = function no(_ref) {\n    var t = _ref.withDivider;\n    var e = io(t);\n    return i({\n      borderRadius: \"0 !important\",\n      marginRight: \"-1px\",\n      zIndex: o.zIndexDefault,\n      \"&:first-child\": {\n        borderBottomLeftRadius: \"\".concat(o.borderRadiusMedium, \" !important\"),\n        borderTopLeftRadius: \"\".concat(o.borderRadiusMedium, \" !important\")\n      },\n      \"&:last-child\": {\n        borderBottomRightRadius: \"\".concat(o.borderRadiusMedium, \" !important\"),\n        borderTopRightRadius: \"\".concat(o.borderRadiusMedium, \" !important\"),\n        marginRight: 0\n      },\n      \"&:focus\": {\n        zIndex: o.zIndexDefault + 1\n      }\n    }, e);\n  },\n  io = function io(t) {\n    return t ? {\n      position: \"relative\",\n      \"&:before\": {\n        content: '\"\"',\n        width: \"1px\",\n        opacity: \"20%\",\n        backgroundColor: o.colorWhite,\n        height: \"60%\",\n        left: \"0\",\n        position: \"absolute\"\n      },\n      \"&:first-child, &:focus\": {\n        \"&:before\": {\n          display: \"none\"\n        }\n      },\n      \"&:hover, &:hover + &\": {\n        \"&:before\": {\n          display: \"none\"\n        }\n      }\n    } : {};\n  },\n  O = function O(_ref2) {\n    var t = _ref2.withDivider;\n    return {\n      buttonGroup: css({\n        display: \"inline-flex\",\n        position: \"relative\"\n      }),\n      groupContent: css(no({\n        withDivider: t\n      }))\n    };\n  };\nfunction U(t, e) {\n  var _t$variant = t.variant,\n    r = _t$variant === void 0 ? \"merged\" : _t$variant,\n    n = t.withDivider,\n    _t$testId = t.testId,\n    a = _t$testId === void 0 ? \"cf-ui-button-group\" : _t$testId,\n    u = t.children,\n    l = t.className,\n    p = t.spacing,\n    d = O({\n      withDivider: n\n    });\n  return r === \"spaced\" ? c.createElement(Stack, {\n    className: l,\n    isInline: !0,\n    flexDirection: \"row\",\n    testId: a,\n    ref: e,\n    spacing: p\n  }, u) : c.createElement(Box, {\n    testId: a,\n    ref: e,\n    className: cx(d.buttonGroup, l)\n  }, c.Children.map(u, function (m, f) {\n    return m ? c.cloneElement(m, {\n      key: f,\n      className: cx(d.groupContent, m.props.className)\n    }) : null;\n  }));\n}\nU.displayName = \"ButtonGroup\";\nvar L = c.forwardRef(U);\nvar x = function x(t) {\n    switch (t) {\n      case \"primary\":\n        return {\n          backgroundColor: o.blue700,\n          borderColor: o.blue700\n        };\n      case \"secondary\":\n        return {\n          backgroundColor: o.gray200\n        };\n      case \"positive\":\n        return {\n          backgroundColor: o.green700,\n          borderColor: o.green700\n        };\n      case \"negative\":\n        return {\n          backgroundColor: o.red800,\n          borderColor: o.red800\n        };\n      case \"transparent\":\n        return {\n          backgroundColor: o.gray100,\n          borderColor: o.gray100\n        };\n      default:\n        return {};\n    }\n  },\n  lo = function lo(t) {\n    switch (t) {\n      case \"primary\":\n        return {\n          color: o.colorWhite,\n          backgroundColor: o.blue500,\n          borderColor: o.blue500,\n          \"&:hover\": {\n            backgroundColor: o.blue600,\n            borderColor: o.blue600,\n            color: o.colorWhite\n          },\n          \"&:active\": x(t),\n          \"&:focus\": {\n            borderColor: o.blue600,\n            boxShadow: o.glowPrimary\n          },\n          \"&:focus:not(:focus-visible)\": {\n            borderColor: o.blue500,\n            boxShadow: \"unset\"\n          },\n          \"&:focus-visible\": {\n            borderColor: o.blue600,\n            boxShadow: o.glowPrimary\n          }\n        };\n      case \"secondary\":\n        return {\n          color: o.gray900,\n          backgroundColor: o.colorWhite,\n          borderColor: o.gray300,\n          \"&:hover\": {\n            backgroundColor: o.gray100,\n            color: o.gray900\n          },\n          \"&:active\": x(t),\n          \"&:focus\": {\n            boxShadow: o.glowPrimary\n          },\n          \"&:focus:not(:focus-visible)\": {\n            boxShadow: \"unset\"\n          },\n          \"&:focus-visible\": {\n            boxShadow: o.glowPrimary\n          }\n        };\n      case \"positive\":\n        return {\n          color: o.colorWhite,\n          backgroundColor: o.colorPositive,\n          borderColor: o.colorPositive,\n          \"&:hover\": {\n            backgroundColor: o.green600,\n            borderColor: o.green600,\n            color: o.colorWhite\n          },\n          \"&:active\": x(t),\n          \"&:focus\": {\n            borderColor: o.green600,\n            boxShadow: o.glowPositive\n          },\n          \"&:focus:not(:focus-visible)\": {\n            borderColor: o.colorPositive,\n            boxShadow: \"unset\"\n          },\n          \"&:focus-visible\": {\n            borderColor: o.green600,\n            boxShadow: o.glowPositive\n          }\n        };\n      case \"negative\":\n        return {\n          color: o.colorWhite,\n          backgroundColor: o.red600,\n          borderColor: o.red600,\n          \"&:hover\": {\n            backgroundColor: o.red700,\n            borderColor: o.red700,\n            color: o.colorWhite\n          },\n          \"&:active\": x(t),\n          \"&:focus\": {\n            borderColor: o.red700,\n            boxShadow: o.glowNegative\n          },\n          \"&:focus:not(:focus-visible)\": {\n            borderColor: o.red600,\n            boxShadow: \"unset\"\n          },\n          \"&:focus-visible\": {\n            borderColor: o.red700,\n            boxShadow: o.glowNegative\n          }\n        };\n      case \"transparent\":\n        return {\n          color: o.gray800,\n          background: \"none\",\n          borderColor: \"transparent\",\n          boxShadow: \"none\",\n          \"&:hover\": {\n            backgroundColor: o.gray100,\n            color: o.gray900\n          },\n          \"&:active\": x(t),\n          \"&:focus\": {\n            backgroundColor: \"transparent\",\n            boxShadow: o.glowPrimary\n          },\n          \"&:focus:not(:focus-visible)\": {\n            boxShadow: \"unset\"\n          },\n          \"&:focus-visible\": {\n            boxShadow: o.glowPrimary\n          }\n        };\n      default:\n        return {};\n    }\n  },\n  uo = function uo(t) {\n    switch (t) {\n      case \"small\":\n        return {\n          fontSize: o.fontSizeM,\n          lineHeight: o.lineHeightCondensed,\n          padding: \"\".concat(o.spacing2Xs, \" \").concat(o.spacingS),\n          minHeight: \"32px\"\n        };\n      case \"medium\":\n        return {\n          fontSize: o.fontSizeM,\n          lineHeight: o.lineHeightCondensed,\n          padding: \"\".concat(o.spacingXs, \" \").concat(o.spacingM),\n          minHeight: \"40px\"\n        };\n      case \"large\":\n        return {\n          fontSize: o.fontSizeXl,\n          lineHeight: o.lineHeightXl,\n          padding: \"\".concat(o.spacingXs, \" \").concat(o.spacingM),\n          minHeight: \"48px\"\n        };\n      default:\n        return {};\n    }\n  },\n  co = function co(_ref3) {\n    var t = _ref3.hasChildren,\n      e = _ref3.variant;\n    var r = {\n      \"&:first-child\": {\n        marginRight: o.spacing2Xs\n      },\n      \"&:last-child\": {\n        marginLeft: o.spacing2Xs\n      }\n    };\n    return css([t ? r : {}, e !== \"transparent\" && t && {\n      \"& svg\": {\n        fill: \"currentColor\"\n      }\n    }]);\n  },\n  W = function W() {\n    return {\n      button: function button(_ref4) {\n        var t = _ref4.variant,\n          e = _ref4.size,\n          r = _ref4.isActive,\n          n = _ref4.isDisabled,\n          a = _ref4.isFullWidth;\n        return css(i(i(i({\n          boxSizing: \"border-box\",\n          border: \"1px solid\",\n          boxShadow: \"0px 1px 0px rgb(25, 37, 50, 0.08)\",\n          borderRadius: o.borderRadiusMedium,\n          cursor: n ? \"not-allowed\" : \"pointer\",\n          fontFamily: o.fontStackPrimary,\n          opacity: n ? .5 : 1,\n          display: a ? \"flex\" : \"inline-flex\",\n          minWidth: a ? \"100%\" : \"auto\",\n          maxWidth: a ? \"100%\" : \"240px\",\n          overflow: \"hidden\",\n          flexShrink: 0,\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          fontWeight: o.fontWeightMedium,\n          outline: \"none\",\n          textDecoration: \"none\",\n          margin: 0,\n          transition: \"background \".concat(o.transitionDurationShort, \" \").concat(o.transitionEasingDefault, \",\\n        opacity \").concat(o.transitionDurationDefault, \" \").concat(o.transitionEasingDefault, \",\\n        border-color \").concat(o.transitionDurationDefault, \" \").concat(o.transitionEasingDefault)\n        }, lo(t)), uo(e)), r ? {\n          transition: \"none\",\n          \"&, &:hover\": x(t)\n        } : {}));\n      },\n      buttonIcon: co,\n      buttonContent: css({\n        whiteSpace: \"nowrap\",\n        overflow: \"hidden\",\n        textOverflow: \"ellipsis\"\n      })\n    };\n  };\nvar fo = \"button\";\nfunction F(t, e) {\n  var _k;\n  var r = W(),\n    R = t,\n    _R$as = R.as,\n    n = _R$as === void 0 ? fo : _R$as,\n    a = R.children,\n    u = R.className,\n    _R$testId = R.testId,\n    l = _R$testId === void 0 ? \"cf-ui-button\" : _R$testId,\n    _R$variant = R.variant,\n    p = _R$variant === void 0 ? \"secondary\" : _R$variant,\n    _R$size = R.size,\n    d = _R$size === void 0 ? \"medium\" : _R$size,\n    m = R.startIcon,\n    f = R.endIcon,\n    v = R.isActive,\n    S = R.isDisabled,\n    b = R.isLoading,\n    Q = R.isFullWidth,\n    Y = R.style,\n    w = y(R, [\"as\", \"children\", \"className\", \"testId\", \"variant\", \"size\", \"startIcon\", \"endIcon\", \"isActive\", \"isDisabled\", \"isLoading\", \"isFullWidth\", \"style\"]),\n    Z = cx(r.button({\n      variant: p,\n      size: d,\n      isActive: v,\n      isDisabled: S,\n      isFullWidth: Q\n    }), u),\n    E = function E(I) {\n      var N;\n      var oo = {\n        primary: \"white\",\n        secondary: \"secondary\",\n        positive: \"white\",\n        negative: \"white\",\n        transparent: \"secondary\"\n      };\n      return !b && c.createElement(Flex, {\n        as: \"span\",\n        className: r.buttonIcon({\n          hasChildren: !!a,\n          variant: p\n        })\n      }, c.cloneElement(I, {\n        size: (N = I.props.size) != null ? N : \"\".concat(d === \"large\" ? \"medium\" : \"small\"),\n        variant: p === \"transparent\" && I.props.variant || oo[p]\n      }));\n    },\n    z = c.createElement(c.Fragment, null, m && E(m), a && c.createElement(Box, {\n      as: \"span\",\n      display: \"block\",\n      className: r.buttonContent\n    }, a), f && E(f), b && c.createElement(Box, {\n      as: \"span\",\n      marginLeft: a || !b ? \"spacingXs\" : \"none\"\n    }, c.createElement(Spinner, {\n      customSize: 18,\n      variant: p === \"secondary\" ? \"default\" : \"white\"\n    }))),\n    k = (_k = {}, _defineProperty(_k, \"data-test-id\", l), _defineProperty(_k, \"className\", Z), _defineProperty(_k, \"ref\", e), _defineProperty(_k, \"style\", Y), _k);\n  return n === \"a\" ? c.createElement(\"a\", B(i(i({}, w), k), {\n    disabled: S\n  }), z) : c.createElement(\"button\", B(i(i({\n    type: \"button\"\n  }, w), k), {\n    disabled: S\n  }), z);\n}\nF.displayName = \"Button\";\nvar h = c.forwardRef(F);\nvar yo = function yo(_ref5) {\n    var t = _ref5.isActive,\n      e = _ref5.isDisabled;\n    var r = {\n        background: o.blue100,\n        borderColor: o.blue600,\n        \"&\": {\n          zIndex: o.zIndexDefault + 1\n        },\n        \"&:hover\": {\n          background: o.blue100\n        }\n      },\n      n = {\n        background: o.colorWhite,\n        \"&:hover\": {\n          background: o.colorWhite,\n          borderColor: e ? o.gray300 : o.blue600,\n          zIndex: o.zIndexDefault + 1\n        },\n        \"&:focus\": {\n          boxShadow: o.glowPrimary,\n          zIndex: o.zIndexDefault + 2\n        },\n        \"&:active, &:active:hover\": e ? {\n          background: o.colorWhite,\n          borderColor: o.gray300,\n          zIndex: o.zIndexDefault + 1\n        } : {\n          background: o.blue100,\n          borderColor: o.blue600,\n          zIndex: o.zIndexDefault + 1\n        }\n      };\n    return t ? i(i({}, n), r) : n;\n  },\n  H = function H(_ref6) {\n    var t = _ref6.isActive,\n      e = _ref6.isDisabled;\n    return {\n      toggleButton: css(yo({\n        isActive: t,\n        isDisabled: e\n      }))\n    };\n  };\nfunction j(t, e) {\n  var b = t,\n    _b$testId = b.testId,\n    r = _b$testId === void 0 ? \"cf-ui-toggle-button\" : _b$testId,\n    n = b.children,\n    a = b.className,\n    _b$isDisabled = b.isDisabled,\n    u = _b$isDisabled === void 0 ? !1 : _b$isDisabled,\n    _b$isActive = b.isActive,\n    l = _b$isActive === void 0 ? !1 : _b$isActive,\n    p = b.icon,\n    d = b.onToggle,\n    _b$size = b.size,\n    m = _b$size === void 0 ? \"medium\" : _b$size,\n    f = y(b, [\"testId\", \"children\", \"className\", \"isDisabled\", \"isActive\", \"icon\", \"onToggle\", \"size\"]),\n    v = H({\n      isActive: l,\n      isDisabled: u\n    });\n  return c.createElement(h, i({\n    testId: r,\n    type: \"button\",\n    ref: e,\n    size: m,\n    onClick: function onClick() {\n      !u && d && d();\n    },\n    className: cx(v.toggleButton, a),\n    startIcon: p,\n    isDisabled: u,\n    \"aria-pressed\": l,\n    \"data-state\": l ? \"on\" : \"off\"\n  }, f), n);\n}\nj.displayName = \"ToggleButton\";\nvar V = c.forwardRef(j);\nfunction J(t, e) {\n  var l = t,\n    _l$testId = l.testId,\n    r = _l$testId === void 0 ? \"cf-ui-icon-button\" : _l$testId,\n    _l$variant = l.variant,\n    n = _l$variant === void 0 ? \"transparent\" : _l$variant,\n    a = l.icon,\n    u = y(l, [\"testId\", \"variant\", \"icon\"]);\n  return c.createElement(h, B(i({\n    testId: r,\n    ref: e,\n    variant: n\n  }, u), {\n    startIcon: a\n  }));\n}\nJ.displayName = \"IconButton\";\nvar K = c.forwardRef(J);\nexport { h as Button, L as ButtonGroup, K as IconButton, V as ToggleButton };","map":{"version":3,"names":["c","Stack","Box","Flex"],"sources":["/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-button/src/ButtonGroup/ButtonGroup.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-button/src/ButtonGroup/ButtonGroup.styles.ts","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-button/src/ToggleButton/ToggleButton.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-button/src/Button/Button.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-button/src/Button/Button.styles.ts","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-button/src/ToggleButton/ToggleButton.styles.ts","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-button/src/IconButton/IconButton.tsx"],"sourcesContent":["import { cx } from 'emotion';\nimport React from 'react';\nimport { Box, Stack, type ExpandProps } from '@contentful/f36-core';\nimport getStyles from './ButtonGroup.styles';\nimport type { ButtonGroupProps } from './types';\n\nfunction _ButtonGroup(\n  props: ExpandProps<ButtonGroupProps>,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const {\n    variant = 'merged',\n    withDivider,\n    testId = 'cf-ui-button-group',\n    children,\n    className,\n    spacing,\n  } = props;\n  const styles = getStyles({ withDivider });\n\n  if (variant === 'spaced') {\n    return (\n      <Stack\n        className={className}\n        isInline\n        flexDirection=\"row\"\n        testId={testId}\n        ref={ref}\n        spacing={spacing}\n      >\n        {children}\n      </Stack>\n    );\n  }\n\n  return (\n    <Box\n      testId={testId}\n      ref={ref}\n      className={cx(styles.buttonGroup, className)}\n    >\n      {React.Children.map(children, (child, key) => {\n        if (!child) {\n          return null;\n        }\n        return React.cloneElement(child as React.ReactElement, {\n          key,\n          className: cx(\n            styles.groupContent,\n            (child as React.ReactElement).props.className,\n          ),\n        });\n      })}\n    </Box>\n  );\n}\n\n_ButtonGroup.displayName = 'ButtonGroup';\n\nexport const ButtonGroup = React.forwardRef(_ButtonGroup);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport type { GetStyleArguments } from './types';\nimport type { CSSObject } from '@emotion/serialize';\n\nconst getGroupContentStyle = ({ withDivider }: GetStyleArguments) => {\n  const dividerStyle = getDividerStyle(withDivider);\n\n  return {\n    borderRadius: '0 !important',\n    marginRight: '-1px',\n    zIndex: tokens.zIndexDefault,\n    '&:first-child': {\n      borderBottomLeftRadius: `${tokens.borderRadiusMedium} !important`,\n      borderTopLeftRadius: `${tokens.borderRadiusMedium} !important`,\n    },\n    '&:last-child': {\n      borderBottomRightRadius: `${tokens.borderRadiusMedium} !important`,\n      borderTopRightRadius: `${tokens.borderRadiusMedium} !important`,\n      marginRight: 0,\n    },\n    '&:focus': {\n      zIndex: tokens.zIndexDefault + 1,\n    },\n    ...dividerStyle,\n  };\n};\n\nconst getDividerStyle = (withDivider: boolean): CSSObject => {\n  if (!withDivider) return {};\n  return {\n    position: 'relative',\n    '&:before': {\n      content: '\"\"',\n      width: '1px',\n      opacity: '20%',\n      backgroundColor: tokens.colorWhite,\n      height: '60%',\n      left: '0',\n      position: 'absolute',\n    },\n    '&:first-child, &:focus': {\n      '&:before': {\n        display: 'none',\n      },\n    },\n    '&:hover, &:hover + &': {\n      '&:before': {\n        display: 'none',\n      },\n    },\n  };\n};\n\nexport default ({ withDivider }: GetStyleArguments) => ({\n  buttonGroup: css({\n    display: 'inline-flex',\n    position: 'relative',\n  }),\n  groupContent: css(getGroupContentStyle({ withDivider })),\n});\n","import React from 'react';\nimport { cx } from 'emotion';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport { Button } from '../Button';\nimport getStyles from './ToggleButton.styles';\nimport { ButtonSize } from '../types';\n\nexport interface ToggleButtonProps extends CommonProps {\n  /**\n   * Applies active styles\n   * @default false\n   */\n  isActive?: boolean;\n  /**\n   * Disabled interaction and applies disabled styles\n   * @default false\n   */\n  isDisabled?: boolean;\n  /**\n   * Expects any of the icon components\n   */\n  icon?: React.ReactElement;\n  /**\n   * Function triggered when the toggle button is clicked.\n   */\n  onToggle: () => void;\n\n  /**\n   * Determines size variation of Button component\n   * @default medium\n   */\n  size?: ButtonSize;\n\n  /**\n   * Aria label is required when using icon only\n   */\n  'aria-label'?: string;\n\n  children?: React.ReactNode;\n}\n\nfunction _ToggleButton(props: ExpandProps<ToggleButtonProps>, ref) {\n  const {\n    testId = 'cf-ui-toggle-button',\n    children,\n    className,\n    isDisabled = false,\n    isActive = false,\n    icon,\n    onToggle,\n    size = 'medium',\n    ...otherProps\n  } = props;\n\n  const styles = getStyles({ isActive, isDisabled });\n\n  const handleToggle = () => {\n    if (!isDisabled && onToggle) {\n      onToggle();\n    }\n  };\n\n  return (\n    <Button\n      testId={testId}\n      type=\"button\"\n      ref={ref}\n      size={size}\n      onClick={handleToggle}\n      className={cx(styles.toggleButton, className)}\n      startIcon={icon}\n      isDisabled={isDisabled}\n      aria-pressed={isActive}\n      data-state={isActive ? 'on' : 'off'}\n      {...otherProps}\n    >\n      {children}\n    </Button>\n  );\n}\n\n_ToggleButton.displayName = 'ToggleButton';\n\nexport const ToggleButton = React.forwardRef(_ToggleButton);\n","import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Flex,\n  Box,\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { Spinner } from '@contentful/f36-spinner';\n\nimport type { ButtonInternalProps } from '../types';\nimport { getStyles } from './Button.styles';\n\nconst BUTTON_DEFAULT_TAG = 'button';\n\nexport type ButtonProps<\n  E extends React.ElementType = typeof BUTTON_DEFAULT_TAG,\n> = PolymorphicProps<ButtonInternalProps, E, 'disabled'>;\n\nfunction _Button<E extends React.ElementType = typeof BUTTON_DEFAULT_TAG>(\n  props: ButtonProps<E>,\n  ref: React.Ref<any>,\n) {\n  const styles = getStyles();\n  const {\n    as = BUTTON_DEFAULT_TAG,\n    children,\n    className,\n    testId = 'cf-ui-button',\n    variant = 'secondary',\n    size = 'medium',\n    startIcon,\n    endIcon,\n    isActive,\n    isDisabled,\n    isLoading,\n    isFullWidth,\n    style,\n    ...otherProps\n  } = props;\n\n  const rootClassNames = cx(\n    styles.button({\n      variant,\n      size,\n      isActive,\n      isDisabled,\n      isFullWidth,\n    }),\n    className,\n  );\n\n  const iconContent = (icon) => {\n    const defaultIconColor: {\n      [Property in ButtonInternalProps['variant']]: string;\n    } = {\n      primary: 'white',\n      secondary: 'secondary',\n      positive: 'white',\n      negative: 'white',\n      transparent: 'secondary',\n    };\n\n    return (\n      !isLoading && (\n        <Flex\n          as=\"span\"\n          className={styles.buttonIcon({ hasChildren: !!children, variant })}\n        >\n          {React.cloneElement(icon, {\n            size: icon.props.size ?? `${size === 'large' ? 'medium' : 'small'}`,\n            // we want to allow variants for icons for transparent buttons\n            variant:\n              (variant === 'transparent' && icon.props.variant) ||\n              defaultIconColor[variant],\n          })}\n        </Flex>\n      )\n    );\n  };\n\n  const commonContent = (\n    <>\n      {startIcon && iconContent(startIcon)}\n      {children && (\n        <Box as=\"span\" display=\"block\" className={styles.buttonContent}>\n          {children}\n        </Box>\n      )}\n      {endIcon && iconContent(endIcon)}\n      {isLoading && (\n        <Box\n          as=\"span\"\n          marginLeft={children || !isLoading ? 'spacingXs' : 'none'}\n        >\n          <Spinner\n            customSize={18}\n            variant={variant === 'secondary' ? 'default' : 'white'}\n          />\n        </Box>\n      )}\n    </>\n  );\n\n  const commonProps = {\n    ['data-test-id']: testId,\n    className: rootClassNames,\n    ref: ref,\n    style,\n  };\n\n  if (as === 'a') {\n    return (\n      <a {...otherProps} {...commonProps} disabled={isDisabled}>\n        {commonContent}\n      </a>\n    );\n  }\n\n  return (\n    <button\n      type=\"button\"\n      {...otherProps}\n      {...commonProps}\n      disabled={isDisabled}\n    >\n      {commonContent}\n    </button>\n  );\n}\n\n_Button.displayName = 'Button';\n\n/**\n * @description: Buttons communicate the action that will occur when the user clicks it\n */\nexport const Button: PolymorphicComponent<\n  ExpandProps<ButtonInternalProps>,\n  typeof BUTTON_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_Button);\n","import { css } from 'emotion';\nimport type { CSSObject } from '@emotion/serialize';\nimport tokens from '@contentful/f36-tokens';\nimport { ButtonSize, ButtonVariant, ButtonStylesProps } from '../types';\n\nconst variantActiveStyles = (variant: ButtonVariant): CSSObject => {\n  switch (variant) {\n    case 'primary':\n      return { backgroundColor: tokens.blue700, borderColor: tokens.blue700 };\n    case 'secondary':\n      return { backgroundColor: tokens.gray200 };\n    case 'positive':\n      return { backgroundColor: tokens.green700, borderColor: tokens.green700 };\n    case 'negative':\n      return { backgroundColor: tokens.red800, borderColor: tokens.red800 };\n    case 'transparent':\n      return { backgroundColor: tokens.gray100, borderColor: tokens.gray100 };\n    default:\n      return {};\n  }\n};\n\nconst variantToStyles = (variant: ButtonVariant): CSSObject => {\n  switch (variant) {\n    case 'primary':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.blue500,\n        borderColor: tokens.blue500,\n        '&:hover': {\n          backgroundColor: tokens.blue600,\n          borderColor: tokens.blue600,\n          color: tokens.colorWhite,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          borderColor: tokens.blue600,\n          boxShadow: tokens.glowPrimary,\n        },\n        '&:focus:not(:focus-visible)': {\n          borderColor: tokens.blue500,\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          borderColor: tokens.blue600,\n          boxShadow: tokens.glowPrimary,\n        },\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray900,\n        backgroundColor: tokens.colorWhite,\n        borderColor: tokens.gray300,\n        '&:hover': {\n          backgroundColor: tokens.gray100,\n          color: tokens.gray900,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          boxShadow: tokens.glowPrimary,\n        },\n        '&:focus:not(:focus-visible)': {\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          boxShadow: tokens.glowPrimary,\n        },\n      };\n    case 'positive':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.colorPositive,\n        borderColor: tokens.colorPositive,\n        '&:hover': {\n          backgroundColor: tokens.green600,\n          borderColor: tokens.green600,\n          color: tokens.colorWhite,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          borderColor: tokens.green600,\n          boxShadow: tokens.glowPositive,\n        },\n        '&:focus:not(:focus-visible)': {\n          borderColor: tokens.colorPositive,\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          borderColor: tokens.green600,\n          boxShadow: tokens.glowPositive,\n        },\n      };\n    case 'negative':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.red600,\n        borderColor: tokens.red600,\n        '&:hover': {\n          backgroundColor: tokens.red700,\n          borderColor: tokens.red700,\n          color: tokens.colorWhite,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          borderColor: tokens.red700,\n          boxShadow: tokens.glowNegative,\n        },\n        '&:focus:not(:focus-visible)': {\n          borderColor: tokens.red600,\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          borderColor: tokens.red700,\n          boxShadow: tokens.glowNegative,\n        },\n      };\n    case 'transparent':\n      return {\n        color: tokens.gray800,\n        background: 'none',\n        borderColor: 'transparent',\n        boxShadow: 'none',\n        '&:hover': {\n          backgroundColor: tokens.gray100,\n          color: tokens.gray900,\n        },\n        '&:active': variantActiveStyles(variant),\n        '&:focus': {\n          backgroundColor: 'transparent',\n          boxShadow: tokens.glowPrimary,\n        },\n        '&:focus:not(:focus-visible)': {\n          boxShadow: 'unset',\n        },\n        '&:focus-visible': {\n          boxShadow: tokens.glowPrimary,\n        },\n      };\n    default:\n      return {};\n  }\n};\n\nconst sizeToStyles = (size: ButtonSize): CSSObject => {\n  switch (size) {\n    case 'small':\n      return {\n        fontSize: tokens.fontSizeM,\n        lineHeight: tokens.lineHeightCondensed,\n        padding: `${tokens.spacing2Xs} ${tokens.spacingS}`,\n        minHeight: '32px',\n      };\n    case 'medium':\n      return {\n        fontSize: tokens.fontSizeM,\n        lineHeight: tokens.lineHeightCondensed,\n        padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n        minHeight: '40px',\n      };\n    case 'large':\n      return {\n        fontSize: tokens.fontSizeXl,\n        lineHeight: tokens.lineHeightXl,\n        padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n        minHeight: '48px',\n      };\n    default:\n      return {};\n  }\n};\n\nconst getButtonIconStyle = ({ hasChildren, variant }) => {\n  const align = {\n    '&:first-child': { marginRight: tokens.spacing2Xs },\n    '&:last-child': { marginLeft: tokens.spacing2Xs },\n  };\n\n  const margin = hasChildren ? align : {};\n\n  return css([\n    margin,\n    // we want to allow variants for icons, but only in the transparent IconButton\n    variant !== 'transparent' &&\n      hasChildren && {\n        '& svg': {\n          fill: 'currentColor',\n        },\n      },\n  ]);\n};\n\nexport const getStyles = () => ({\n  button: ({\n    variant,\n    size,\n    isActive,\n    isDisabled,\n    isFullWidth,\n  }: ButtonStylesProps) =>\n    css({\n      boxSizing: 'border-box',\n      border: `1px solid`,\n      boxShadow: '0px 1px 0px rgb(25, 37, 50, 0.08)',\n      borderRadius: tokens.borderRadiusMedium,\n      cursor: isDisabled ? 'not-allowed' : 'pointer',\n      fontFamily: tokens.fontStackPrimary,\n      opacity: isDisabled ? 0.5 : 1,\n      display: isFullWidth ? 'flex' : 'inline-flex',\n      minWidth: isFullWidth ? '100%' : 'auto',\n      maxWidth: isFullWidth ? '100%' : '240px',\n      overflow: 'hidden',\n      flexShrink: 0,\n      justifyContent: 'center',\n      alignItems: 'center',\n      fontWeight: tokens.fontWeightMedium,\n      outline: 'none',\n      textDecoration: 'none',\n      margin: 0, // remove the default margin in Safari.\n      transition: `background ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault},\n        opacity ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault},\n        border-color ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n      ...variantToStyles(variant),\n      ...sizeToStyles(size),\n      ...(isActive\n        ? {\n            transition: 'none',\n            '&, &:hover': variantActiveStyles(variant),\n          }\n        : {}),\n    }),\n  buttonIcon: getButtonIconStyle,\n  buttonContent: css({\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n  }),\n});\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { GetStyleArguments } from './types';\n\nconst getToggleButtonStyle = ({ isActive, isDisabled }: GetStyleArguments) => {\n  const activeStyle = {\n    background: tokens.blue100,\n    borderColor: tokens.blue600,\n    '&': {\n      zIndex: tokens.zIndexDefault + 1,\n    },\n    '&:hover': {\n      background: tokens.blue100,\n    },\n  };\n\n  const baseStyle = {\n    background: tokens.colorWhite,\n    '&:hover': {\n      background: tokens.colorWhite,\n      borderColor: isDisabled ? tokens.gray300 : tokens.blue600,\n      zIndex: tokens.zIndexDefault + 1,\n    },\n    '&:focus': {\n      boxShadow: tokens.glowPrimary,\n      zIndex: tokens.zIndexDefault + 2,\n    },\n    '&:active, &:active:hover': isDisabled\n      ? {\n          background: tokens.colorWhite,\n          borderColor: tokens.gray300,\n          zIndex: tokens.zIndexDefault + 1,\n        }\n      : {\n          background: tokens.blue100,\n          borderColor: tokens.blue600,\n          zIndex: tokens.zIndexDefault + 1,\n        },\n  };\n\n  if (isActive) {\n    return {\n      ...baseStyle,\n      ...activeStyle,\n    };\n  }\n\n  return baseStyle;\n};\n\nexport default ({ isActive, isDisabled }: GetStyleArguments) => ({\n  toggleButton: css(getToggleButtonStyle({ isActive, isDisabled })),\n});\n","import React from 'react';\nimport type {\n  PolymorphicProps,\n  PolymorphicComponent,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Button } from '../Button';\nimport type { ButtonInternalProps } from '../types';\n\ninterface IconButtonInternalProps\n  extends Omit<ButtonInternalProps, 'startIcon' | 'endIcon'> {\n  /**\n   * Expects any of the icon components\n   */\n  icon: React.ReactElement;\n  /**\n   * Aria label is required when using icon only\n   */\n  'aria-label': string;\n}\n\nconst ICON_BUTTON_DEFAULT_TAG = 'button';\n\nexport type IconButtonProps<\n  E extends React.ElementType = typeof ICON_BUTTON_DEFAULT_TAG,\n> = PolymorphicProps<IconButtonInternalProps, E, 'disabled'>;\n\nfunction _IconButton<\n  E extends React.ElementType = typeof ICON_BUTTON_DEFAULT_TAG,\n>(props: IconButtonProps<E>, ref: React.Ref<any>) {\n  const {\n    testId = 'cf-ui-icon-button',\n    variant = 'transparent',\n    icon,\n    ...otherProps\n  } = props;\n\n  return (\n    <Button\n      testId={testId}\n      ref={ref}\n      variant={variant}\n      {...otherProps}\n      startIcon={icon}\n    />\n  );\n}\n\n_IconButton.displayName = 'IconButton';\n\nexport const IconButton: PolymorphicComponent<\n  ExpandProps<IconButtonInternalProps>,\n  typeof ICON_BUTTON_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_IconButton);\n"],"mappings":";;;AI0NyE,OAAAA,CAAA,aAChD;AAAoC,SAAAC,KAAA,EAAAC,GAAA,EAAAC,IAC/B,8BAA6B"},"metadata":{},"sourceType":"module","externalDependencies":[]}