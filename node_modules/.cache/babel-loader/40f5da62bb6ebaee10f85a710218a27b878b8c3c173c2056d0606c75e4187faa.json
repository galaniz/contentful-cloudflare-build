{"ast":null,"code":"import _regeneratorRuntime from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _createForOfIteratorHelper from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport * as P from 'react';\nimport P__default from 'react';\nimport uo from 'react-modal';\nimport { Flex, Box } from '@contentful/f36-core';\nimport { cx, css } from 'emotion';\nimport { CloseIcon } from '@contentful/f36-icons';\nimport { Button, ButtonGroup } from '@contentful/f36-button';\nimport { Subheading } from '@contentful/f36-typography';\nimport m from '@contentful/f36-tokens';\nimport X from 'react-dom';\nvar to = Object.defineProperty,\n  no = Object.defineProperties;\nvar ro = Object.getOwnPropertyDescriptors;\nvar E = Object.getOwnPropertySymbols;\nvar G = Object.prototype.hasOwnProperty,\n  Y = Object.prototype.propertyIsEnumerable;\nvar q = function q(o, e, t) {\n    return e in o ? to(o, e, {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: t\n    }) : o[e] = t;\n  },\n  l = function l(o, e) {\n    for (var t in e || (e = {})) G.call(e, t) && q(o, t, e[t]);\n    if (E) {\n      var _iterator = _createForOfIteratorHelper(E(e)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var t = _step.value;\n          Y.call(e, t) && q(o, t, e[t]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    return o;\n  },\n  u = function u(o, e) {\n    return no(o, ro(e));\n  };\nvar h = function h(o, e) {\n  var t = {};\n  for (var n in o) G.call(o, n) && e.indexOf(n) < 0 && (t[n] = o[n]);\n  if (o != null && E) {\n    var _iterator2 = _createForOfIteratorHelper(E(o)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var n = _step2.value;\n        e.indexOf(n) < 0 && Y.call(o, n) && (t[n] = o[n]);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return t;\n};\nvar F = function F(o, e, t) {\n  return new Promise(function (n, i) {\n    var a = function a(r) {\n        try {\n          d(t.next(r));\n        } catch (M) {\n          i(M);\n        }\n      },\n      s = function s(r) {\n        try {\n          d(t.throw(r));\n        } catch (M) {\n          i(M);\n        }\n      },\n      d = function d(r) {\n        return r.done ? n(r.value) : Promise.resolve(r.value).then(a, s);\n      };\n    d((t = t.apply(o, e)).next());\n  });\n};\nfunction K() {\n  return {\n    root: css({\n      position: \"relative\",\n      padding: \"\".concat(m.spacingM, \" \").concat(m.spacingM, \" \").concat(m.spacingM, \" \").concat(m.spacingL),\n      borderRadius: \"\".concat(m.borderRadiusMedium, \" \").concat(m.borderRadiusMedium, \" 0 0\"),\n      borderBottom: \"1px solid \".concat(m.gray300)\n    }),\n    buttonContainer: css({\n      position: \"relative\",\n      width: m.spacing2Xl,\n      height: m.spacingL,\n      button: {\n        position: \"absolute\",\n        top: \"calc(-1 * \".concat(m.spacing2Xs, \")\"),\n        right: 0\n      }\n    })\n  };\n}\nvar v = function v(a) {\n  var s = a,\n    o = s.onClose,\n    e = s.title,\n    _s$testId = s.testId,\n    t = _s$testId === void 0 ? \"cf-ui-modal-header\" : _s$testId,\n    n = s.className,\n    i = h(s, [\"onClose\", \"title\", \"testId\", \"className\"]);\n  var d = K();\n  return P__default.createElement(Flex, u(l({}, i), {\n    className: cx(d.root, n),\n    testId: t,\n    alignItems: \"center\",\n    justifyContent: \"space-between\"\n  }), P__default.createElement(Subheading, {\n    as: \"h2\",\n    isTruncated: !0,\n    marginBottom: \"none\"\n  }, e), o && P__default.createElement(Flex, {\n    alignItems: \"center\",\n    className: d.buttonContainer\n  }, P__default.createElement(Button, {\n    variant: \"transparent\",\n    \"aria-label\": \"Close\",\n    startIcon: P__default.createElement(CloseIcon, {\n      size: \"small\"\n    }),\n    onClick: function onClick() {\n      o();\n    },\n    size: \"small\"\n  })));\n};\nv.displayName = \"ModalHeader\";\nfunction U() {\n  return {\n    root: css({\n      padding: \"\".concat(m.spacingM, \" \").concat(m.spacingL),\n      color: m.gray700,\n      fontSize: m.fontSizeM,\n      fontFamily: m.fontStackPrimary,\n      lineHeight: m.lineHeightM,\n      overflowY: \"auto\",\n      overflowX: \"auto\",\n      boxSizing: \"border-box\"\n    })\n  };\n}\nvar R = function R(i) {\n  var a = i,\n    _a$testId = a.testId,\n    o = _a$testId === void 0 ? \"cf-ui-modal-content\" : _a$testId,\n    e = a.className,\n    t = a.children,\n    n = h(a, [\"testId\", \"className\", \"children\"]);\n  var s = U();\n  return P__default.createElement(Box, u(l({}, n), {\n    as: \"div\",\n    className: cx(s.root, e),\n    testId: o\n  }), t);\n};\nR.displayName = \"ModalContent\";\nfunction V(o) {\n  var e = cx(css({\n    margin: m.spacing2Xl,\n    backgroundColor: m.colorWhite,\n    borderRadius: o.size === \"zen\" ? 0 : m.borderRadiusMedium,\n    boxShadow: m.boxShadowHeavy,\n    maxHeight: \"calc(100vh - 1rem * (100 / \".concat(m.fontBaseDefault, \"))\"),\n    maxWidth: \"calc(100vw - 1rem * (100 / \".concat(m.fontBaseDefault, \"))\"),\n    overflow: \"hidden\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  }), o.allowHeightOverflow ? css({\n    overflow: \"auto\",\n    maxHeight: \"none\"\n  }) : null, o.size === \"zen\" ? css({\n    maxWidth: \"none\",\n    maxHeight: \"none\",\n    margin: 0,\n    height: \"100%\",\n    width: \"100%\"\n  }) : null, o.className);\n  return {\n    portal: css({\n      display: \"block\"\n    }),\n    base: {\n      root: cx(css({\n        zIndex: m.zIndexModalContent,\n        position: \"relative\",\n        padding: 0,\n        display: \"inline-block\",\n        margin: \"0 auto\",\n        textAlign: \"left\",\n        outline: \"none\",\n        transform: o.size === \"zen\" ? \"scale(1)\" : \"scale(0.85)\",\n        transition: \"transform \".concat(m.transitionDurationDefault, \" \").concat(m.transitionEasingDefault)\n      }), o.size === \"zen\" ? css({\n        width: \"100%\",\n        height: \"100%\"\n      }) : null),\n      afterOpen: css({\n        transform: \"scale(1) !important\"\n      }),\n      beforeClose: css({\n        transform: o.size === \"zen\" ? \"scale(1)\" : \"scale(0.85)\"\n      })\n    },\n    modalOverlay: {\n      root: cx(css({\n        display: \"flex\",\n        alignItems: \"baseline\",\n        flexWrap: \"wrap\",\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        zIndex: m.zIndexModal,\n        opacity: 0,\n        transition: \"opacity \".concat(m.transitionDurationDefault, \" \").concat(m.transitionEasingDefault),\n        position: \"fixed\",\n        overflowY: \"auto\",\n        backgroundColor: \"rgba(12, 20, 28, 0.74902)\",\n        textAlign: \"center\"\n      }), o.position === \"center\" ? css({\n        alignItems: \"center\",\n        justifyContent: \"center\"\n      }) : null, o.overlayClassName),\n      afterOpen: css({\n        opacity: 1\n      }),\n      beforeClose: css({\n        opacity: 0\n      })\n    },\n    modal: e\n  };\n}\nvar Co = {\n  medium: \"520px\",\n  small: \"400px\",\n  large: \"700px\",\n  fullWidth: \"100vw\",\n  zen: \"100vw\"\n};\nfunction yo(o) {\n  if (o && o.querySelectorAll) {\n    var e = o.querySelectorAll(\"input, button\");\n    if (e.length > 0) {\n      var t = e[0];\n      typeof t.focus == \"function\" && t.focus();\n    }\n  }\n}\nvar j = function j(M) {\n  var S = M,\n    _S$allowHeightOverflo = S.allowHeightOverflow,\n    o = _S$allowHeightOverflo === void 0 ? !1 : _S$allowHeightOverflo,\n    _S$position = S.position,\n    e = _S$position === void 0 ? \"center\" : _S$position,\n    _S$shouldCloseOnEscap = S.shouldCloseOnEscapePress,\n    t = _S$shouldCloseOnEscap === void 0 ? !0 : _S$shouldCloseOnEscap,\n    _S$shouldCloseOnOverl = S.shouldCloseOnOverlayClick,\n    n = _S$shouldCloseOnOverl === void 0 ? !0 : _S$shouldCloseOnOverl,\n    _S$size = S.size,\n    i = _S$size === void 0 ? \"medium\" : _S$size,\n    _S$testId = S.testId,\n    a = _S$testId === void 0 ? \"cf-ui-modal\" : _S$testId,\n    _S$topOffset = S.topOffset,\n    s = _S$topOffset === void 0 ? \"50px\" : _S$topOffset,\n    d = S.aria,\n    r = h(S, [\"allowHeightOverflow\", \"position\", \"shouldCloseOnEscapePress\", \"shouldCloseOnOverlayClick\", \"size\", \"testId\", \"topOffset\", \"aria\"]);\n  var I, L;\n  var z = P.useRef(null),\n    x = u(l({}, r), {\n      allowHeightOverflow: o,\n      position: e,\n      shouldCloseOnEscapePress: t,\n      shouldCloseOnOverlayClick: n,\n      size: i,\n      testId: a,\n      topOffset: s\n    }),\n    c = V({\n      position: e,\n      size: i,\n      allowHeightOverflow: o,\n      className: r.className,\n      overlayClassName: (I = r.overlayProps) == null ? void 0 : I.className\n    }),\n    B = function B() {\n      var O, N;\n      var f = z.current;\n      if (f) {\n        var T = document.activeElement;\n        if (f !== T && f.contains(T)) return;\n      }\n      var b = (O = x.initialFocusRef) == null ? void 0 : O.current;\n      b ? (N = b.focus) == null || N.call(b) : f && yo(f);\n    },\n    $ = function $() {\n      x.onAfterOpen && x.onAfterOpen.apply(x, arguments), B();\n    },\n    k = function k() {\n      return P.createElement(P.Fragment, null, r.title && P.createElement(v, l({\n        title: r.title,\n        onClose: x.onClose\n      }, r.modalHeaderProps)), P.createElement(R, l({}, r.modalContentProps), r.children));\n    };\n  return P.createElement(uo, {\n    ariaHideApp: !1,\n    aria: d,\n    onRequestClose: x.onClose,\n    isOpen: r.isShown,\n    onAfterOpen: $,\n    shouldCloseOnEsc: t,\n    shouldCloseOnOverlayClick: n,\n    shouldFocusAfterRender: !0,\n    shouldReturnFocusAfterClose: !0,\n    portalClassName: c.portal,\n    style: {\n      content: {\n        top: e === \"center\" ? 0 : s\n      },\n      overlay: (L = r.overlayProps) == null ? void 0 : L.style\n    },\n    className: {\n      base: c.base.root,\n      afterOpen: c.base.afterOpen,\n      beforeClose: c.base.beforeClose\n    },\n    overlayClassName: {\n      base: c.modalOverlay.root,\n      afterOpen: c.modalOverlay.afterOpen,\n      beforeClose: c.modalOverlay.beforeClose\n    },\n    closeTimeoutMS: 200,\n    contentRef: function contentRef(f) {\n      z.current = f;\n    }\n  }, P.createElement(Box, {\n    testId: a,\n    style: {\n      width: Co[i] || i\n    },\n    className: c.modal,\n    \"data-modal-root\": !0\n  }, typeof r.children == \"function\" ? r.children(x) : k()));\n};\nj.displayName = \"Modal\";\nvar A = function A(i) {\n  var a = i,\n    _a$testId2 = a.testId,\n    o = _a$testId2 === void 0 ? \"cf-ui-modal-controls\" : _a$testId2,\n    e = a.className,\n    t = a.children,\n    n = h(a, [\"testId\", \"className\", \"children\"]);\n  return P__default.createElement(Flex, u(l({}, n), {\n    className: e,\n    testId: o,\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n    margin: \"spacingL\",\n    marginTop: \"none\"\n  }), P__default.createElement(ButtonGroup, {\n    variant: \"spaced\",\n    spacing: \"spacingS\"\n  }, t));\n};\nA.displayName = \"ModalControls\";\nvar g = j;\ng.Content = R;\ng.Header = v;\ng.Controls = A;\nvar oo = function oo(_ref) {\n  var _ref$allowHeightOverf = _ref.allowHeightOverflow,\n    o = _ref$allowHeightOverf === void 0 ? !1 : _ref$allowHeightOverf,\n    _ref$cancelLabel = _ref.cancelLabel,\n    e = _ref$cancelLabel === void 0 ? \"Cancel\" : _ref$cancelLabel,\n    _ref$cancelTestId = _ref.cancelTestId,\n    t = _ref$cancelTestId === void 0 ? \"cf-ui-modal-confirm-cancel-button\" : _ref$cancelTestId,\n    n = _ref.children,\n    _ref$confirmLabel = _ref.confirmLabel,\n    i = _ref$confirmLabel === void 0 ? \"Confirm\" : _ref$confirmLabel,\n    _ref$confirmTestId = _ref.confirmTestId,\n    a = _ref$confirmTestId === void 0 ? \"cf-ui-modal-confirm-confirm-button\" : _ref$confirmTestId,\n    _ref$intent = _ref.intent,\n    s = _ref$intent === void 0 ? \"positive\" : _ref$intent,\n    _ref$isConfirmDisable = _ref.isConfirmDisabled,\n    d = _ref$isConfirmDisable === void 0 ? !1 : _ref$isConfirmDisable,\n    _ref$isConfirmLoading = _ref.isConfirmLoading,\n    r = _ref$isConfirmLoading === void 0 ? !1 : _ref$isConfirmLoading,\n    M = _ref.isShown,\n    S = _ref.modalContentProps,\n    z = _ref.modalControlsProps,\n    x = _ref.modalHeaderProps,\n    c = _ref.onCancel,\n    B = _ref.onConfirm,\n    _ref$shouldCloseOnEsc = _ref.shouldCloseOnEscapePress,\n    $ = _ref$shouldCloseOnEsc === void 0 ? !0 : _ref$shouldCloseOnEsc,\n    _ref$shouldCloseOnOve = _ref.shouldCloseOnOverlayClick,\n    k = _ref$shouldCloseOnOve === void 0 ? !0 : _ref$shouldCloseOnOve,\n    _ref$size = _ref.size,\n    I = _ref$size === void 0 ? \"medium\" : _ref$size,\n    _ref$testId = _ref.testId,\n    L = _ref$testId === void 0 ? \"cf-ui-modal-confirm\" : _ref$testId,\n    _ref$title = _ref.title,\n    f = _ref$title === void 0 ? \"Are you sure?\" : _ref$title,\n    b = _ref.initialFocusRef;\n  var O = P__default.useRef(null),\n    N = i ? P__default.createElement(Button, {\n      testId: a,\n      isDisabled: d,\n      isLoading: r,\n      variant: s,\n      size: \"small\",\n      onClick: function onClick() {\n        return B();\n      }\n    }, i) : null,\n    T = e ? P__default.createElement(Button, {\n      testId: t,\n      variant: \"secondary\",\n      onClick: c,\n      size: \"small\",\n      ref: b || O\n    }, e) : null;\n  return P__default.createElement(g, {\n    testId: L,\n    isShown: M,\n    onClose: c,\n    size: I,\n    shouldCloseOnOverlayClick: k,\n    shouldCloseOnEscapePress: $,\n    allowHeightOverflow: o,\n    initialFocusRef: O\n  }, function () {\n    return P__default.createElement(P__default.Fragment, null, P__default.createElement(g.Header, l({\n      title: f || \"\"\n    }, x)), P__default.createElement(g.Content, l({}, S), n), P__default.createElement(g.Controls, l({}, z), T, N));\n  });\n};\noo.displayName = \"ModalConfirm\";\nvar eo = function eo(o) {\n    var e = document.getElementById(o);\n    return e !== null || (e = document.createElement(\"div\"), e.setAttribute(\"id\", o), document.body.appendChild(e)), e;\n  },\n  D = new Map();\nfunction xo() {\n  var _this = this;\n  D.forEach(function (i, a) {\n    return F(_this, [i, a], function (_ref2, n) {\n      var o = _ref2.render,\n        e = _ref2.currentConfig,\n        t = _ref2.delay;\n      return /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var s;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              s = u(l({}, e), {\n                isShown: !1\n              });\n              o(s);\n              _context.next = 4;\n              return new Promise(function (d) {\n                return setTimeout(d, t);\n              });\n            case 4:\n              X.unmountComponentAtNode(eo(n));\n              D.delete(n);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })();\n    });\n  });\n}\nfunction ho(o) {\n  var e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  e = l({\n    delay: 300\n  }, e);\n  var t = \"modals-root\".concat(e.modalId || Date.now()),\n    n = eo(t);\n  return new Promise(function (i) {\n    var a = {\n      onClose: d,\n      isShown: !0\n    };\n    function s(_ref3) {\n      var r = _ref3.onClose,\n        M = _ref3.isShown;\n      X.render(o({\n        onClose: r,\n        isShown: M\n      }), n);\n    }\n    function d(r) {\n      return F(this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              a = u(l({}, a), {\n                isShown: !1\n              });\n              s(a);\n              _context2.next = 4;\n              return new Promise(function (M) {\n                return setTimeout(M, e.delay);\n              });\n            case 4:\n              X.unmountComponentAtNode(n);\n              n.remove();\n              D.delete(t);\n              i(r);\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n    }\n    s(a), D.set(t, {\n      render: s,\n      currentConfig: a,\n      delay: e.delay\n    });\n  });\n}\nvar bo = {\n  open: ho,\n  closeAll: xo\n};\nexport { g as Modal, oo as ModalConfirm, R as ModalContent, A as ModalControls, v as ModalHeader, bo as ModalLauncher };","map":{"version":3,"names":[],"sources":["/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-modal/src/Modal.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-modal/src/ModalHeader/ModalHeader.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-modal/src/ModalHeader/ModalHeader.styles.ts","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-modal/src/ModalContent/ModalContent.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-modal/src/ModalContent/ModalContent.styles.ts","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-modal/src/Modal.styles.ts","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-modal/src/ModalControls/ModalControls.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-modal/src/CompoundModal.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-modal/src/ModalConfirm/ModalConfirm.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-modal/src/ModalLauncher/ModalLauncher.tsx"],"sourcesContent":["import * as React from 'react';\nimport ReactModal from 'react-modal';\n\nimport { Box, type CommonProps, type ExpandProps } from '@contentful/f36-core';\n\nimport { ModalHeader, ModalHeaderProps } from './ModalHeader/ModalHeader';\nimport { ModalContent, ModalContentProps } from './ModalContent/ModalContent';\nimport { getModalStyles } from './Modal.styles';\nimport type { ModalSizeType, ModalPositionType } from './types';\n\nconst ModalSizesMapper: { [key in ModalSizeType]: string } = {\n  medium: '520px',\n  small: '400px',\n  large: '700px',\n  fullWidth: '100vw',\n  zen: '100vw',\n};\n\nexport interface ModalProps extends CommonProps {\n  /**\n   * When true, the dialog is shown.\n   */\n  isShown: boolean;\n\n  /**\n   * Function that will be run when the modal is requested to be closed, prior to actually closing.\n   */\n  onClose: ReactModal.Props['onRequestClose'];\n\n  /**\n   * Function that will be run after the modal has opened.\n   */\n  onAfterOpen?: ReactModal.Props['onAfterOpen'];\n\n  /**\n   * Additional aria attributes\n   */\n  aria?: ReactModal.Props['aria'];\n\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   * @default true\n   */\n  shouldCloseOnOverlayClick?: boolean;\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   * @default true\n   */\n  shouldCloseOnEscapePress?: boolean;\n  /**\n   * Indicating if modal is centered or linked to the top\n   * @default center\n   */\n  position?: ModalPositionType;\n  /**\n   * Top offset if position is 'top'\n   * @default 50px\n   */\n  topOffset?: number | string;\n  /**\n   * Modal title that is used in header\n   */\n  title?: string;\n  /**\n   * Size of the modal window\n   * @default medium\n   */\n  size?: ModalSizeType | string | number;\n  /**\n   * Are modals higher than viewport allowed\n   * @default false\n   */\n  allowHeightOverflow?: boolean;\n\n  /**\n   * Optional props to override overlay behaviour\n   */\n  overlayProps?: Pick<CommonProps, 'className' | 'style'>;\n\n  /**\n   * Optional props to override ModalHeader behaviour\n   */\n  modalHeaderProps?: Partial<ModalHeaderProps>;\n\n  /**\n   * Optional props to override ModalContent behaviour\n   */\n  modalContentProps?: Partial<ModalContentProps>;\n\n  /**\n   * Optional property to set initial focus\n   */\n  initialFocusRef?: React.RefObject<HTMLElement>;\n\n  children: React.ReactNode | RenderModal;\n}\n\ntype RenderModal = (modalProps: ModalProps) => React.ReactNode;\n\nfunction focusFirstWithinNode(node: HTMLElement) {\n  if (node && node.querySelectorAll) {\n    const elements = node.querySelectorAll('input, button');\n    if (elements.length > 0) {\n      const firstElement = elements[0];\n      // @ts-expect-error focus might be missing\n      if (typeof firstElement.focus === 'function') {\n        // @ts-expect-error focus might be missing\n        firstElement.focus();\n      }\n    }\n  }\n}\n\nexport const Modal = ({\n  allowHeightOverflow = false,\n  position = 'center',\n  shouldCloseOnEscapePress = true,\n  shouldCloseOnOverlayClick = true,\n  size = 'medium',\n  testId = 'cf-ui-modal',\n  topOffset = '50px',\n  aria,\n  ...otherProps\n}: ExpandProps<ModalProps>) => {\n  const contentRef = React.useRef<HTMLDivElement>(null);\n\n  const props = {\n    ...otherProps,\n    allowHeightOverflow,\n    position,\n    shouldCloseOnEscapePress,\n    shouldCloseOnOverlayClick,\n    size,\n    testId,\n    topOffset,\n  };\n\n  const styles = getModalStyles({\n    position,\n    size,\n    allowHeightOverflow,\n    className: otherProps.className,\n    overlayClassName: otherProps.overlayProps?.className,\n  });\n\n  const onInitialFocus = () => {\n    const contentEl = contentRef.current;\n    if (contentEl) {\n      const activeEl = document.activeElement;\n      const isContentContainsActive =\n        contentEl !== activeEl && contentEl.contains(activeEl);\n\n      if (isContentContainsActive) {\n        return;\n      }\n    }\n\n    const initialFocusEl = props.initialFocusRef?.current;\n    if (initialFocusEl) {\n      initialFocusEl.focus?.();\n    } else if (contentEl) {\n      focusFirstWithinNode(contentEl);\n    }\n  };\n\n  const onAfterOpen: ModalProps['onAfterOpen'] = (...args) => {\n    if (props.onAfterOpen) {\n      props.onAfterOpen(...args);\n    }\n    onInitialFocus();\n  };\n\n  const renderDefault = () => {\n    return (\n      <>\n        {otherProps.title && (\n          <ModalHeader\n            title={otherProps.title}\n            onClose={props.onClose}\n            {...otherProps.modalHeaderProps}\n          />\n        )}\n        <ModalContent {...otherProps.modalContentProps}>\n          {otherProps.children}\n        </ModalContent>\n      </>\n    );\n  };\n\n  return (\n    <ReactModal\n      ariaHideApp={false}\n      aria={aria}\n      onRequestClose={props.onClose}\n      isOpen={otherProps.isShown}\n      onAfterOpen={onAfterOpen}\n      shouldCloseOnEsc={shouldCloseOnEscapePress}\n      shouldCloseOnOverlayClick={shouldCloseOnOverlayClick}\n      shouldFocusAfterRender\n      shouldReturnFocusAfterClose\n      portalClassName={styles.portal}\n      style={{\n        content: {\n          top: position === 'center' ? 0 : topOffset,\n        },\n        overlay: otherProps.overlayProps?.style,\n      }}\n      className={{\n        base: styles.base.root,\n        afterOpen: styles.base.afterOpen,\n        beforeClose: styles.base.beforeClose,\n      }}\n      overlayClassName={{\n        base: styles.modalOverlay.root,\n        afterOpen: styles.modalOverlay.afterOpen,\n        beforeClose: styles.modalOverlay.beforeClose,\n      }}\n      closeTimeoutMS={200}\n      contentRef={(ref) => {\n        contentRef.current = ref;\n      }}\n    >\n      <Box\n        testId={testId}\n        style={{\n          width: ModalSizesMapper[size] || size,\n        }}\n        className={styles.modal}\n        data-modal-root\n      >\n        {typeof otherProps.children === 'function'\n          ? otherProps.children(props)\n          : renderDefault()}\n      </Box>\n    </ReactModal>\n  );\n};\n\nModal.displayName = 'Modal';\n","import React from 'react';\nimport { cx } from 'emotion';\nimport { CloseIcon } from '@contentful/f36-icons';\nimport {\n  Flex,\n  type PropsWithHTMLElement,\n  type CommonProps,\n} from '@contentful/f36-core';\nimport { Button } from '@contentful/f36-button';\nimport { Subheading } from '@contentful/f36-typography';\n\nimport { getModalHeaderStyles } from './ModalHeader.styles';\n\ninterface ModalHeaderInternalProps extends CommonProps {\n  title: string;\n  onClose?: Function;\n}\n\nexport type ModalHeaderProps = PropsWithHTMLElement<\n  ModalHeaderInternalProps,\n  'div'\n>;\n\nexport const ModalHeader = ({\n  onClose,\n  title,\n  testId = 'cf-ui-modal-header',\n  className,\n  ...otherProps\n}: ModalHeaderProps): React.ReactElement => {\n  const styles = getModalHeaderStyles();\n\n  return (\n    <Flex\n      {...otherProps}\n      className={cx(styles.root, className)}\n      testId={testId}\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n    >\n      <Subheading as=\"h2\" isTruncated marginBottom=\"none\">\n        {title}\n      </Subheading>\n      {onClose && (\n        <Flex alignItems=\"center\" className={styles.buttonContainer}>\n          <Button\n            variant=\"transparent\"\n            aria-label=\"Close\"\n            startIcon={<CloseIcon size=\"small\" />}\n            onClick={() => {\n              onClose();\n            }}\n            size=\"small\"\n          />\n        </Flex>\n      )}\n    </Flex>\n  );\n};\n\nModalHeader.displayName = 'ModalHeader';\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\n\nexport function getModalHeaderStyles() {\n  return {\n    root: css({\n      position: 'relative',\n      padding: `${tokens.spacingM} ${tokens.spacingM} ${tokens.spacingM} ${tokens.spacingL}`,\n      borderRadius: `${tokens.borderRadiusMedium} ${tokens.borderRadiusMedium} 0 0`,\n      borderBottom: `1px solid ${tokens.gray300}`,\n    }),\n    buttonContainer: css({\n      position: 'relative',\n      width: tokens.spacing2Xl,\n      height: tokens.spacingL,\n      button: {\n        position: 'absolute',\n        top: `calc(-1 * ${tokens.spacing2Xs})`,\n        right: 0,\n      },\n    }),\n  };\n}\n","import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Box,\n  type PropsWithHTMLElement,\n  type CommonProps,\n} from '@contentful/f36-core';\nimport { getModalContentStyles } from './ModalContent.styles';\n\ninterface ModalContentInternalProps extends CommonProps {\n  children: React.ReactNode;\n}\n\nexport type ModalContentProps = PropsWithHTMLElement<\n  ModalContentInternalProps,\n  'div'\n>;\n\nexport const ModalContent = ({\n  testId = 'cf-ui-modal-content',\n  className,\n  children,\n  ...otherProps\n}: ModalContentProps) => {\n  const styles = getModalContentStyles();\n  return (\n    <Box\n      {...otherProps}\n      as=\"div\"\n      className={cx(styles.root, className)}\n      testId={testId}\n    >\n      {children}\n    </Box>\n  );\n};\n\nModalContent.displayName = 'ModalContent';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport function getModalContentStyles() {\n  return {\n    root: css({\n      padding: `${tokens.spacingM} ${tokens.spacingL}`,\n      color: tokens.gray700,\n      fontSize: tokens.fontSizeM,\n      fontFamily: tokens.fontStackPrimary,\n      lineHeight: tokens.lineHeightM,\n      overflowY: 'auto',\n      overflowX: 'auto',\n      boxSizing: 'border-box',\n    }),\n  };\n}\n","import tokens from '@contentful/f36-tokens';\nimport { css, cx } from 'emotion';\n\nimport type { ModalProps } from './Modal';\n\nexport function getModalStyles(props: {\n  size: ModalProps['size'];\n  position: ModalProps['position'];\n  allowHeightOverflow?: boolean;\n  className?: string;\n  overlayClassName?: string;\n}) {\n  const modal = cx(\n    css({\n      margin: tokens.spacing2Xl,\n      backgroundColor: tokens.colorWhite,\n      borderRadius: props.size === 'zen' ? 0 : tokens.borderRadiusMedium,\n      boxShadow: tokens.boxShadowHeavy,\n      maxHeight: `calc(100vh - 1rem * (100 / ${tokens.fontBaseDefault}))`,\n      maxWidth: `calc(100vw - 1rem * (100 / ${tokens.fontBaseDefault}))`,\n      overflow: 'hidden',\n      display: 'flex',\n      flexDirection: 'column',\n    }),\n    props.allowHeightOverflow\n      ? css({\n          overflow: 'auto',\n          maxHeight: 'none',\n        })\n      : null,\n    props.size === 'zen'\n      ? css({\n          maxWidth: 'none',\n          maxHeight: 'none',\n          margin: 0,\n          height: '100%',\n          width: '100%',\n        })\n      : null,\n    props.className,\n  );\n\n  return {\n    portal: css({\n      display: 'block',\n    }),\n    base: {\n      root: cx(\n        css({\n          zIndex: tokens.zIndexModalContent,\n          position: 'relative',\n          padding: 0,\n          display: 'inline-block',\n          margin: '0 auto',\n          textAlign: 'left',\n          outline: 'none',\n          transform: props.size === 'zen' ? 'scale(1)' : 'scale(0.85)',\n          transition: `transform ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n        }),\n        props.size === 'zen'\n          ? css({\n              width: '100%',\n              height: '100%',\n            })\n          : null,\n      ),\n      afterOpen: css({\n        transform: 'scale(1) !important',\n      }),\n      beforeClose: css({\n        transform: props.size === 'zen' ? 'scale(1)' : 'scale(0.85)',\n      }),\n    },\n    modalOverlay: {\n      root: cx(\n        css({\n          display: 'flex',\n          alignItems: 'baseline',\n          flexWrap: 'wrap',\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0,\n          zIndex: tokens.zIndexModal,\n          opacity: 0,\n          transition: `opacity ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n          position: 'fixed',\n          overflowY: 'auto',\n          backgroundColor: 'rgba(12, 20, 28, 0.74902)',\n          textAlign: 'center',\n        }),\n        props.position === 'center'\n          ? css({\n              alignItems: 'center',\n              justifyContent: 'center',\n            })\n          : null,\n        props.overlayClassName,\n      ),\n      afterOpen: css({\n        opacity: 1,\n      }),\n      beforeClose: css({\n        opacity: 0,\n      }),\n    },\n    modal,\n  };\n}\n","import React from 'react';\n\nimport {\n  Flex,\n  type PropsWithHTMLElement,\n  type CommonProps,\n} from '@contentful/f36-core';\nimport { ButtonGroup } from '@contentful/f36-button';\n\ninterface ModalControlsInternalProps extends CommonProps {\n  children: React.ReactElement[] | React.ReactElement;\n}\n\nexport type ModalControlsProps = PropsWithHTMLElement<\n  ModalControlsInternalProps,\n  'div'\n>;\n\nexport const ModalControls = ({\n  testId = 'cf-ui-modal-controls',\n  className,\n  children,\n  ...otherProps\n}: ModalControlsProps): React.ReactElement => {\n  return (\n    <Flex\n      {...otherProps}\n      className={className}\n      testId={testId}\n      flexDirection=\"row\"\n      justifyContent=\"flex-end\"\n      margin=\"spacingL\"\n      marginTop=\"none\"\n    >\n      <ButtonGroup variant=\"spaced\" spacing=\"spacingS\">\n        {children}\n      </ButtonGroup>\n    </Flex>\n  );\n};\n\nModalControls.displayName = 'ModalControls';\n","import { Modal as OriginalModal } from './Modal';\nimport { ModalContent } from './ModalContent/ModalContent';\nimport { ModalHeader } from './ModalHeader/ModalHeader';\nimport { ModalControls } from './ModalControls/ModalControls';\n\ntype CompoundModal = typeof OriginalModal & {\n  Content: typeof ModalContent;\n  Header: typeof ModalHeader;\n  Controls: typeof ModalControls;\n};\n\nexport const Modal = OriginalModal as CompoundModal;\nModal.Content = ModalContent;\nModal.Header = ModalHeader;\nModal.Controls = ModalControls;\n","import React from 'react';\n\nimport { Modal } from '../CompoundModal';\nimport type { ModalProps } from '../Modal';\nimport type { ModalHeaderProps } from '../ModalHeader/ModalHeader';\nimport type { ModalContentProps } from '../ModalContent/ModalContent';\nimport type { ModalControlsProps } from '../ModalControls/ModalControls';\nimport { Button } from '@contentful/f36-button';\n\nexport interface ModalConfirmProps {\n  /**\n   * When true, the dialog is shown.\n   */\n  isShown: boolean;\n  /**\n   * Function that will be called when the confirm button is clicked. This does not close the ModalConfirm.\n   */\n  onConfirm(): void;\n  /**\n   * Function that will be called when the cancel button is clicked. This does not close the ModalConfirm.\n   */\n  onCancel: ModalProps['onClose'];\n  /**\n      Modal title that is used in header\n    */\n  title?: string;\n  /**\n   * Label of the confirm button\n   */\n  confirmLabel?: string | false;\n  /**\n   * Label of the cancel button\n   */\n  cancelLabel?: string | false;\n  /**\n   * The intent of the ModalConfirm. Used for the Button.\n   */\n  intent?: 'primary' | 'positive' | 'negative';\n  /**\n   * Size of the modal window\n   */\n  size?: ModalProps['size'];\n  /**\n   * Boolean indicating if clicking the overlay should close the overlay.\n   */\n  shouldCloseOnOverlayClick?: boolean;\n  /**\n   * Boolean indicating if pressing the esc key should close the overlay.\n   */\n  shouldCloseOnEscapePress?: boolean;\n  /**\n   * When true, the confirm button is set to disabled.\n   */\n  isConfirmDisabled?: boolean;\n  /**\n   * When true, the confirm button is set to loading.\n   */\n  isConfirmLoading?: boolean;\n  /**\n   * Are modals higher than viewport allowed\n   */\n  allowHeightOverflow?: boolean;\n\n  /**\n   * Optional props to override ModalHeader behaviour\n   */\n  modalHeaderProps?: Partial<ModalHeaderProps>;\n\n  /**\n   * Optional props to override ModalContent behaviour\n   */\n  modalContentProps?: Partial<ModalContentProps>;\n\n  /**\n   * Optional props to override ModalControl behaviour\n   */\n  modalControlsProps?: Partial<ModalControlsProps>;\n\n  /**\n   * Optional property to set initial focus\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any -- we don't know the type of element to give initial focus\n  initialFocusRef?: React.RefObject<any>;\n\n  testId?: string;\n  confirmTestId?: string;\n  cancelTestId?: string;\n  children: React.ReactNode;\n}\n\nexport const ModalConfirm = ({\n  allowHeightOverflow = false,\n  cancelLabel = 'Cancel',\n  cancelTestId = 'cf-ui-modal-confirm-cancel-button',\n  children,\n  confirmLabel = 'Confirm',\n  confirmTestId = 'cf-ui-modal-confirm-confirm-button',\n  intent = 'positive',\n  isConfirmDisabled = false,\n  isConfirmLoading = false,\n  isShown,\n  modalContentProps,\n  modalControlsProps,\n  modalHeaderProps,\n  onCancel,\n  onConfirm,\n  shouldCloseOnEscapePress = true,\n  shouldCloseOnOverlayClick = true,\n  size = 'medium',\n  testId = 'cf-ui-modal-confirm',\n  title = 'Are you sure?',\n  initialFocusRef,\n}: ModalConfirmProps) => {\n  const cancelRef = React.useRef(null);\n\n  const confirmButton = confirmLabel ? (\n    <Button\n      testId={confirmTestId}\n      isDisabled={isConfirmDisabled}\n      isLoading={isConfirmLoading}\n      variant={intent}\n      size=\"small\"\n      onClick={() => onConfirm()}\n    >\n      {confirmLabel}\n    </Button>\n  ) : null;\n\n  const cancelButton = cancelLabel ? (\n    <Button\n      testId={cancelTestId}\n      variant=\"secondary\"\n      onClick={onCancel}\n      size=\"small\"\n      ref={initialFocusRef || cancelRef}\n    >\n      {cancelLabel}\n    </Button>\n  ) : null;\n\n  return (\n    <Modal\n      testId={testId}\n      isShown={isShown}\n      onClose={onCancel}\n      size={size}\n      shouldCloseOnOverlayClick={shouldCloseOnOverlayClick}\n      shouldCloseOnEscapePress={shouldCloseOnEscapePress}\n      allowHeightOverflow={allowHeightOverflow}\n      initialFocusRef={cancelRef}\n    >\n      {() => {\n        return (\n          <React.Fragment>\n            <Modal.Header title={title || ''} {...modalHeaderProps} />\n            <Modal.Content {...modalContentProps}>{children}</Modal.Content>\n            <Modal.Controls {...modalControlsProps}>\n              {cancelButton}\n              {confirmButton}\n            </Modal.Controls>\n          </React.Fragment>\n        );\n      }}\n    </Modal>\n  );\n};\n\nModalConfirm.displayName = 'ModalConfirm';\n","/* global Promise */\nimport ReactDOM from 'react-dom';\n\n// @todo: change any to unknown\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface ModalLauncherComponentRendererProps<T = any> {\n  isShown: boolean;\n  onClose: (result?: T) => void;\n}\n\nexport interface ModalLauncherOpenOptions {\n  /**\n   * Unique id to be used as identifier for the modal contianer\n   */\n  modalId?: string;\n  /**\n   * ms before removing the component from the tree\n   * @default 300\n   */\n  delay?: number;\n}\n\ninterface CloseModalData {\n  delay: number;\n  render: (args: ModalLauncherComponentRendererProps<any>) => void;\n  currentConfig: ModalLauncherComponentRendererProps<any>;\n}\n\nconst getRoot = (rootElId: string): HTMLElement => {\n  // Reuse the container if we find it\n  let rootDom = document.getElementById(rootElId);\n  if (rootDom !== null) {\n    return rootDom;\n  }\n\n  // Otherwise create it\n  rootDom = document.createElement('div');\n  rootDom.setAttribute('id', rootElId);\n  document.body.appendChild(rootDom);\n  return rootDom;\n};\n\nconst openModalsIds: Map<string, CloseModalData> = new Map();\nfunction closeAll() {\n  openModalsIds.forEach(async ({ render, currentConfig, delay }, rootElId) => {\n    const config = { ...currentConfig, isShown: false };\n    render(config);\n    await new Promise((resolveDelay) => setTimeout(resolveDelay, delay));\n    ReactDOM.unmountComponentAtNode(getRoot(rootElId));\n    openModalsIds.delete(rootElId);\n  });\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction open<T = any>(\n  componentRenderer: (\n    props: ModalLauncherComponentRendererProps<T>,\n  ) => JSX.Element,\n  options: ModalLauncherOpenOptions = {},\n): Promise<T> {\n  options = { delay: 300, ...options };\n\n  // Allow components to specify if they wish to reuse the modal container\n  const rootElId = `modals-root${options.modalId || Date.now()}`;\n  const rootDom = getRoot(rootElId);\n\n  return new Promise((resolve) => {\n    let currentConfig = { onClose, isShown: true };\n\n    function render({\n      onClose,\n      isShown,\n    }: ModalLauncherComponentRendererProps<T>) {\n      ReactDOM.render(componentRenderer({ onClose, isShown }), rootDom);\n    }\n\n    async function onClose(arg?: T) {\n      currentConfig = {\n        ...currentConfig,\n        isShown: false,\n      };\n      render(currentConfig);\n      await new Promise((resolveDelay) =>\n        setTimeout(resolveDelay, options.delay),\n      );\n      ReactDOM.unmountComponentAtNode(rootDom);\n      rootDom.remove();\n      openModalsIds.delete(rootElId);\n      resolve(arg);\n    }\n\n    render(currentConfig);\n    openModalsIds.set(rootElId, {\n      render,\n      currentConfig,\n      delay: options.delay,\n    });\n  });\n}\n\nexport const ModalLauncher = {\n  open,\n  closeAll,\n};\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}