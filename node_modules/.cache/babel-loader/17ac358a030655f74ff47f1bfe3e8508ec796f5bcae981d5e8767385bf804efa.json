{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport { cx, css } from 'emotion';\nimport a from 'react';\nimport { Grid, Flex } from '@contentful/f36-core';\nimport { Button } from '@contentful/f36-button';\nimport { Heading, Text, Paragraph } from '@contentful/f36-typography';\nimport { CloseIcon, InfoCircleIcon, CheckCircleIcon, ErrorCircleIcon, WarningIcon } from '@contentful/f36-icons';\nimport { Icon } from '@contentful/f36-icon';\nimport o from '@contentful/f36-tokens';\nvar H = Object.defineProperty,\n  k = Object.defineProperties;\nvar S = Object.getOwnPropertyDescriptors;\nvar c = Object.getOwnPropertySymbols;\nvar b = Object.prototype.hasOwnProperty,\n  N = Object.prototype.propertyIsEnumerable;\nvar f = function f(e, t, r) {\n    return t in e ? H(e, t, {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: r\n    }) : e[t] = r;\n  },\n  p = function p(e, t) {\n    for (var r in t || (t = {})) b.call(t, r) && f(e, r, t[r]);\n    if (c) {\n      var _iterator = _createForOfIteratorHelper(c(t)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var r = _step.value;\n          N.call(t, r) && f(e, r, t[r]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    return e;\n  },\n  C = function C(e, t) {\n    return k(e, S(t));\n  };\nvar y = function y(e, t) {\n  var r = {};\n  for (var n in e) b.call(e, n) && t.indexOf(n) < 0 && (r[n] = e[n]);\n  if (e != null && c) {\n    var _iterator2 = _createForOfIteratorHelper(c(e)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var n = _step2.value;\n        t.indexOf(n) < 0 && N.call(e, n) && (r[n] = e[n]);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return r;\n};\nvar w = function w(e) {\n    switch (e) {\n      case \"primary\":\n        return {\n          backgroundColor: o.blue100,\n          borderColor: o.blue300,\n          a: {\n            color: o.blue700\n          }\n        };\n      case \"positive\":\n        return {\n          backgroundColor: o.green100,\n          borderColor: o.green300,\n          a: {\n            color: o.blue700\n          }\n        };\n      case \"negative\":\n        return {\n          backgroundColor: o.red100,\n          borderColor: o.red300,\n          a: {\n            color: o.blue700\n          }\n        };\n      case \"warning\":\n        return {\n          backgroundColor: o.orange100,\n          borderColor: o.orange300,\n          a: {\n            color: o.blue700\n          }\n        };\n      case \"neutral\":\n        return {\n          backgroundColor: o.gray100,\n          borderColor: o.gray300,\n          a: {\n            color: o.blue700\n          }\n        };\n      default:\n        return {};\n    }\n  },\n  h = function h() {\n    return {\n      container: function container(_ref) {\n        var e = _ref.variant;\n        return css(p({\n          position: \"relative\",\n          borderRadius: o.borderRadiusMedium,\n          border: \"1px solid\"\n        }, w(e)));\n      },\n      title: css({\n        color: o.gray800,\n        fontSize: o.fontSizeL,\n        lineHeight: o.lineHeightL\n      }),\n      description: css({\n        color: o.gray700\n      }),\n      close: css({\n        position: \"absolute\",\n        top: o.spacingXs,\n        right: o.spacingXs,\n        padding: o.spacingXs,\n        \"&:hover, &:active\": {\n          backgroundColor: \"transparent\"\n        }\n      }),\n      closeIcon: css({\n        fill: o.gray600\n      })\n    };\n  };\nvar G = {\n    primary: InfoCircleIcon,\n    positive: CheckCircleIcon,\n    negative: ErrorCircleIcon,\n    warning: WarningIcon,\n    neutral: InfoCircleIcon\n  },\n  v = a.forwardRef(function (e, t) {\n    var u = e,\n      r = u.children,\n      n = u.className,\n      _u$withCloseButton = u.withCloseButton,\n      d = _u$withCloseButton === void 0 ? !1 : _u$withCloseButton,\n      _u$variant = u.variant,\n      l = _u$variant === void 0 ? \"primary\" : _u$variant,\n      P = u.onClose,\n      _u$testId = u.testId,\n      g = _u$testId === void 0 ? \"cf-ui-note\" : _u$testId,\n      m = u.title,\n      I = y(u, [\"children\", \"className\", \"withCloseButton\", \"variant\", \"onClose\", \"testId\", \"title\"]),\n      i = h();\n    return a.createElement(Grid, C(p({}, I), {\n      columns: d ? \"auto 1fr 24px\" : \"auto 1fr\",\n      as: \"article\",\n      className: cx(i.container({\n        variant: l\n      }), n),\n      testId: g,\n      ref: t,\n      padding: \"spacingM\"\n    }), a.createElement(Icon, {\n      as: G[l],\n      variant: l === \"neutral\" ? \"muted\" : l,\n      size: m ? \"medium\" : \"small\"\n    }), a.createElement(Flex, {\n      flexDirection: \"column\"\n    }, m && a.createElement(Heading, {\n      as: \"h2\",\n      className: i.title,\n      marginBottom: r ? \"spacingS\" : \"none\"\n    }, m), r && a.createElement(Text, {\n      as: \"div\",\n      lineHeight: \"lineHeightM\",\n      className: i.description\n    }, typeof r == \"string\" ? a.createElement(Paragraph, {\n      marginBottom: \"none\"\n    }, r) : r)), d && a.createElement(Button, {\n      variant: \"transparent\",\n      startIcon: a.createElement(CloseIcon, {\n        className: i.closeIcon\n      }),\n      onClick: P,\n      testId: \"\".concat(g, \"-close\"),\n      \"aria-label\": \"Dismiss\",\n      className: i.close\n    }));\n  });\nv.displayName = \"Note\";\nexport { v as Note };","map":{"version":3,"names":[],"sources":["/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-note/src/Note.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-note/src/Note.styles.tsx"],"sourcesContent":["import { cx } from 'emotion';\nimport React from 'react';\nimport {\n  Flex,\n  Grid,\n  type CommonProps,\n  type PropsWithHTMLElement,\n  type ExpandProps,\n} from '@contentful/f36-core';\nimport { Button } from '@contentful/f36-button';\nimport { Heading, Paragraph, Text } from '@contentful/f36-typography';\nimport {\n  CheckCircleIcon,\n  CloseIcon,\n  ErrorCircleIcon,\n  InfoCircleIcon,\n  WarningIcon,\n} from '@contentful/f36-icons';\nimport { Icon } from '@contentful/f36-icon';\n\nimport { getNoteStyles } from './Note.styles';\n\nconst icons = {\n  primary: InfoCircleIcon,\n  positive: CheckCircleIcon,\n  negative: ErrorCircleIcon,\n  warning: WarningIcon,\n  neutral: InfoCircleIcon,\n};\n\nexport type NoteVariant =\n  | 'negative'\n  | 'positive'\n  | 'primary'\n  | 'warning'\n  | 'neutral';\n\nexport type NoteInternalProps = CommonProps & {\n  /**\n   * Determines style variation of Note component\n   */\n  variant?: NoteVariant;\n  /**\n   * Sets title in the Note\n   */\n  title?: React.ReactNode;\n  /**\n   * Children of Note\n   */\n  children?: React.ReactNode | string;\n  /**\n   * Defines if the close button should be rendered\n   * @default false\n   */\n  withCloseButton?: boolean;\n  /**\n   * Callback for handling closing\n   */\n  onClose?: React.MouseEventHandler<HTMLButtonElement>;\n};\nexport type NoteProps = PropsWithHTMLElement<NoteInternalProps, 'article'>;\n\n/**\n * @description: Note provides context and information about a situation or action.\n */\nexport const Note = React.forwardRef<HTMLElement, ExpandProps<NoteProps>>(\n  (props, ref) => {\n    const {\n      children,\n      className,\n      withCloseButton = false,\n      variant = 'primary',\n      onClose,\n      testId = 'cf-ui-note',\n      title,\n      ...otherProps\n    } = props;\n\n    const styles = getNoteStyles();\n\n    return (\n      <Grid\n        {...otherProps}\n        columns={withCloseButton ? 'auto 1fr 24px' : 'auto 1fr'} // 24px is the width of the close button\n        as=\"article\"\n        className={cx(styles.container({ variant }), className)}\n        testId={testId}\n        ref={ref}\n        padding=\"spacingM\"\n      >\n        <Icon\n          as={icons[variant]}\n          variant={variant === 'neutral' ? 'muted' : variant}\n          size={title ? 'medium' : 'small'}\n        />\n        <Flex flexDirection=\"column\">\n          {title && (\n            <Heading\n              as=\"h2\"\n              className={styles.title}\n              marginBottom={!children ? 'none' : 'spacingS'}\n            >\n              {title}\n            </Heading>\n          )}\n          {children && (\n            <Text\n              as=\"div\"\n              lineHeight=\"lineHeightM\"\n              className={styles.description}\n            >\n              {typeof children === 'string' ? (\n                <Paragraph marginBottom=\"none\">{children}</Paragraph>\n              ) : (\n                children\n              )}\n            </Text>\n          )}\n        </Flex>\n        {withCloseButton && (\n          <Button\n            variant=\"transparent\"\n            startIcon={<CloseIcon className={styles.closeIcon} />}\n            onClick={onClose}\n            testId={`${testId}-close`}\n            aria-label=\"Dismiss\"\n            className={styles.close}\n          />\n        )}\n      </Grid>\n    );\n  },\n);\n\nNote.displayName = 'Note';\n","import { css } from 'emotion';\nimport type { CSSObject } from '@emotion/serialize';\nimport tokens from '@contentful/f36-tokens';\n\nimport type { NoteProps, NoteVariant } from './Note';\n\nconst variantToStyles = (variant: NoteVariant): CSSObject => {\n  switch (variant) {\n    case 'primary':\n      return {\n        backgroundColor: tokens.blue100,\n        borderColor: tokens.blue300,\n\n        a: {\n          color: tokens.blue700,\n        },\n      };\n    case 'positive':\n      return {\n        backgroundColor: tokens.green100,\n        borderColor: tokens.green300,\n\n        a: {\n          color: tokens.blue700,\n        },\n      };\n    case 'negative':\n      return {\n        backgroundColor: tokens.red100,\n        borderColor: tokens.red300,\n\n        a: {\n          color: tokens.blue700,\n        },\n      };\n    case 'warning':\n      return {\n        backgroundColor: tokens.orange100,\n        borderColor: tokens.orange300,\n\n        a: {\n          color: tokens.blue700,\n        },\n      };\n    case 'neutral':\n      return {\n        backgroundColor: tokens.gray100,\n        borderColor: tokens.gray300,\n\n        a: {\n          color: tokens.blue700,\n        },\n      };\n    default:\n      return {};\n  }\n};\n\nexport const getNoteStyles = () => {\n  return {\n    container: ({ variant }: Pick<NoteProps, 'variant'>) =>\n      css({\n        position: 'relative',\n        borderRadius: tokens.borderRadiusMedium,\n        border: '1px solid',\n        ...variantToStyles(variant),\n      }),\n    title: css({\n      color: tokens.gray800,\n      fontSize: tokens.fontSizeL,\n      lineHeight: tokens.lineHeightL,\n    }),\n    description: css({\n      color: tokens.gray700,\n    }),\n    close: css({\n      position: 'absolute',\n      top: tokens.spacingXs,\n      right: tokens.spacingXs,\n      padding: tokens.spacingXs,\n      '&:hover, &:active': {\n        backgroundColor: 'transparent',\n      },\n    }),\n    closeIcon: css({\n      fill: tokens.gray600,\n    }),\n  };\n};\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}