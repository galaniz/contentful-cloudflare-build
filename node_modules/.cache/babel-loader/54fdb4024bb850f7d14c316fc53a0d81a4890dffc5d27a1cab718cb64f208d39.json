{"ast":null,"code":"import _toConsumableArray from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _classCallCheck from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _slicedToArray from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport c, { Component, useState, useCallback, useRef } from 'react';\nimport { render } from 'react-dom';\nimport { cx, css } from 'emotion';\nimport { CheckCircleIcon, WarningIcon, ErrorCircleIcon, InfoCircleIcon, CloseIcon } from '@contentful/f36-icons';\nimport { Button } from '@contentful/f36-button';\nimport { TextLink } from '@contentful/f36-text-link';\nimport { Flex, Box } from '@contentful/f36-core';\nimport { Heading, Paragraph } from '@contentful/f36-typography';\nimport a from '@contentful/f36-tokens';\nimport vt from 'react-animate-height';\nvar ot = Object.defineProperty,\n  it = Object.defineProperties;\nvar et = Object.getOwnPropertyDescriptors;\nvar v = Object.getOwnPropertySymbols;\nvar X = Object.prototype.hasOwnProperty,\n  U = Object.prototype.propertyIsEnumerable;\nvar W = function W(t, o, i) {\n    return o in t ? ot(t, o, {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: i\n    }) : t[o] = i;\n  },\n  m = function m(t, o) {\n    for (var i in o || (o = {})) X.call(o, i) && W(t, i, o[i]);\n    if (v) {\n      var _iterator = _createForOfIteratorHelper(v(o)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var i = _step.value;\n          U.call(o, i) && W(t, i, o[i]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    return t;\n  },\n  f = function f(t, o) {\n    return it(t, et(o));\n  };\nvar b = function b(t, o) {\n  var i = {};\n  for (var r in t) X.call(t, r) && o.indexOf(r) < 0 && (i[r] = t[r]);\n  if (t != null && v) {\n    var _iterator2 = _createForOfIteratorHelper(v(t)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var r = _step2.value;\n        o.indexOf(r) < 0 && U.call(t, r) && (i[r] = t[r]);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return i;\n};\nfunction $(t) {\n  var o = useRef(t),\n    _useState = useState(!1),\n    _useState2 = _slicedToArray(_useState, 2),\n    i = _useState2[1];\n  return [o, function (s) {\n    Object.is(o.current, s) || (o.current = s, i(function (u) {\n      return !u;\n    }));\n  }];\n}\nvar q = {\n    positive: a.green600,\n    negative: a.red600,\n    warning: a.orange400,\n    primary: a.blue600\n  },\n  at = function at(_ref) {\n    var t = _ref.variant;\n    return css({\n      background: a.colorWhite,\n      borderRadius: a.borderRadiusMedium,\n      boxShadow: a.boxShadowHeavy,\n      boxSizing: \"border-box\",\n      display: \"flex\",\n      overflow: \"hidden\",\n      position: \"relative\",\n      padding: a.spacingM,\n      width: \"100%\",\n      \"&:before\": {\n        backgroundColor: q[t],\n        content: '\"\"',\n        height: \"100%\",\n        left: 0,\n        position: \"absolute\",\n        top: 0,\n        width: \"2px\"\n      }\n    });\n  },\n  st = function st(_ref2) {\n    var t = _ref2.variant;\n    return css({\n      fill: q[t],\n      marginRight: a.spacingM,\n      alignItems: \"flex-start\"\n    });\n  },\n  ct = {\n    fontSize: a.fontSizeM,\n    lineHeight: a.lineHeightM,\n    width: \"100%\"\n  },\n  lt = {\n    color: a.gray800,\n    fontSize: a.fontSizeL,\n    lineHeight: a.lineHeightL\n  },\n  pt = {\n    color: a.gray700,\n    wordBreak: \"break-word\",\n    hyphens: \"auto\",\n    \"&:last-child\": {\n      marginBottom: 0\n    }\n  },\n  mt = {\n    marginBottom: \"-\".concat(a.spacingXs),\n    marginRight: \"-\".concat(a.spacingXs),\n    marginTop: \"-\".concat(a.spacingXs)\n  },\n  _ = function _(_ref3) {\n    var t = _ref3.variant;\n    return {\n      wrapper: at({\n        variant: t\n      }),\n      icon: st({\n        variant: t\n      }),\n      notification: css(ct),\n      title: css(lt),\n      content: css(pt),\n      closeButton: css(mt)\n    };\n  };\nvar wt = function wt(t, o) {\n    var e;\n    var n = t,\n      i = n.className,\n      r = n.children,\n      s = n.cta,\n      _n$withCloseButton = n.withCloseButton,\n      u = _n$withCloseButton === void 0 ? !0 : _n$withCloseButton,\n      _n$variant = n.variant,\n      p = _n$variant === void 0 ? \"positive\" : _n$variant,\n      C = n.onClose,\n      _n$testId = n.testId,\n      M = _n$testId === void 0 ? \"cf-ui-notification\" : _n$testId,\n      S = n.title,\n      V = b(n, [\"className\", \"children\", \"cta\", \"withCloseButton\", \"variant\", \"onClose\", \"testId\", \"title\"]),\n      d = _({\n        variant: p\n      }),\n      N = S ? \"medium\" : \"small\",\n      B = {\n        positive: c.createElement(CheckCircleIcon, {\n          variant: p,\n          size: N\n        }),\n        warning: c.createElement(WarningIcon, {\n          variant: p,\n          size: N\n        }),\n        negative: c.createElement(ErrorCircleIcon, {\n          variant: p,\n          size: N\n        }),\n        primary: c.createElement(InfoCircleIcon, {\n          variant: p,\n          size: N\n        })\n      };\n    return c.createElement(Flex, f(m({\n      \"data-test-id\": M,\n      role: \"alert\",\n      \"data-intent\": {\n        positive: \"success\",\n        warning: \"warning\",\n        negative: \"error\",\n        primary: \"info\"\n      }[p],\n      \"aria-live\": p === \"positive\" ? \"polite\" : \"assertive\",\n      className: cx(d.wrapper, i)\n    }, V), {\n      ref: o\n    }), c.createElement(Box, {\n      className: cx(d.icon)\n    }, B[p]), c.createElement(Box, {\n      className: cx(d.notification)\n    }, S && c.createElement(Heading, {\n      as: \"h2\",\n      className: cx(d.title),\n      marginBottom: \"spacingXs\"\n    }, S), r && c.createElement(Paragraph, {\n      className: d.content,\n      marginBottom: \"spacingXs\"\n    }, r), (s == null ? void 0 : s.label) && c.createElement(TextLink, f(m({}, s == null ? void 0 : s.textLinkProps), {\n      as: ((e = s == null ? void 0 : s.textLinkProps) == null ? void 0 : e.as) || \"button\"\n    }), s.label)), u && c.createElement(Box, null, c.createElement(Button, {\n      className: cx(d.closeButton),\n      variant: \"transparent\",\n      startIcon: c.createElement(CloseIcon, null),\n      onClick: function onClick() {\n        C && C();\n      },\n      testId: \"cf-ui-notification-close\",\n      \"aria-label\": \"Dismiss\"\n    })));\n  },\n  A = c.forwardRef(wt);\nvar It = {\n    isShown: !1\n  },\n  P = /*#__PURE__*/function (_Component) {\n    _inherits(P, _Component);\n    var _super = _createSuper(P);\n    function P() {\n      var _this;\n      _classCallCheck(this, P);\n      _this = _super.apply(this, arguments);\n      _this.timer = null;\n      _this.state = {\n        isShown: !1\n      };\n      _this.startTimer = function () {\n        if (_this.props.duration) {\n          if (_this.props.duration === 0) return;\n          _this.timer = window.setTimeout(function () {\n            _this.handleClose();\n          }, _this.props.duration);\n        }\n      };\n      _this.stopTimer = function () {\n        _this.props.duration !== 0 && _this.timer && (clearTimeout(_this.timer), _this.timer = null);\n      };\n      _this.handleClose = function () {\n        _this.stopTimer(), _this.setState({\n          isShown: !1\n        });\n      };\n      _this.handleMouseEnter = function () {\n        _this.stopTimer();\n      };\n      _this.handleMouseLeave = function () {\n        _this.startTimer();\n      };\n      return _this;\n    }\n    _createClass(P, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.startTimer(), this.setState({\n          isShown: !0\n        });\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(i) {\n        i.isShown !== this.props.isShown && this.setState({\n          isShown: this.props.isShown\n        });\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.stopTimer();\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this2 = this;\n        var u = this.props,\n          s = b(u, [\"isShown\", \"duration\"]);\n        return c.createElement(vt, {\n          duration: 200,\n          height: this.state.isShown ? \"auto\" : 0,\n          easing: \"ease-in-out\",\n          animateOpacity: !0,\n          onHeightAnimationEnd: function onHeightAnimationEnd() {\n            _this2.state.isShown === !1 && _this2.props.onClose && _this2.props.onClose();\n          }\n        }, c.createElement(\"div\", {\n          className: cx(css({\n            pointerEvents: \"all\"\n          })),\n          onMouseEnter: this.handleMouseEnter,\n          onMouseLeave: this.handleMouseLeave\n        }, c.createElement(A, f(m({}, s), {\n          onClose: this.handleClose\n        }))));\n      }\n    }]);\n    return P;\n  }(Component);\nP.defaultProps = It;\nvar J = function J(t, o) {\n  var _css;\n  return {\n    manager: css((_css = {\n      left: 0,\n      margin: \"0 auto\",\n      maxWidth: \"560px\",\n      position: \"fixed\",\n      pointerEvents: \"none\",\n      right: 0\n    }, _defineProperty(_css, t, o), _defineProperty(_css, \"zIndex\", a.zIndexNotification), _css)),\n    container: css({\n      display: \"flex\",\n      flexDirection: \"column\",\n      margin: \"0 auto\",\n      maxWidth: \"560px\",\n      minWidth: \"360px\",\n      \"& > div\": {\n        marginBottom: t === \"top\" ? 0 : a.spacingS,\n        marginTop: t === \"top\" ? a.spacingS : 0\n      }\n    })\n  };\n};\nvar Q = 0,\n  Tt = function Tt() {\n    return Q += 1, Q;\n  },\n  I = function I(_ref4) {\n    var t = _ref4.register;\n    var _$ = $([]),\n      _$2 = _slicedToArray(_$, 2),\n      o = _$2[0],\n      i = _$2[1],\n      _useState3 = useState(\"bottom\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      r = _useState4[0],\n      s = _useState4[1],\n      _useState5 = useState(20),\n      _useState6 = _slicedToArray(_useState5, 2),\n      u = _useState6[0],\n      p = _useState6[1],\n      _useState7 = useState(6e3),\n      _useState8 = _slicedToArray(_useState7, 2),\n      C = _useState8[0],\n      M = _useState8[1],\n      S = J(r, u),\n      V = useCallback(function (n, e) {\n        if (n === \"bottom\" || n === \"top\") {\n          var D = e && e.offset ? e.offset : 20;\n          s(n), p(D);\n        }\n      }, []),\n      d = useCallback(function (n) {\n        i(o.current.map(function (e) {\n          return e.id !== n ? e : f(m({}, e), {\n            isShown: !1\n          });\n        }));\n      }, [o, i]),\n      N = useCallback(function (n) {\n        i(o.current.filter(function (e) {\n          return e.id !== n;\n        }));\n      }, [o, i]),\n      B = useCallback(function () {\n        i(o.current.map(function (n) {\n          return f(m({}, n), {\n            isShown: !1\n          });\n        }));\n      }, [o, i]),\n      L = useCallback(function (n, e) {\n        var D = e && typeof e.duration != \"undefined\" ? e.duration : C,\n          Z = e != null && e.variant ? e.variant : \"positive\",\n          R = e && typeof e.withClose != \"undefined\" ? e.withClose : !0,\n          j = e != null && e.id ? e.id : Tt(),\n          g = {\n            id: j,\n            text: n,\n            onClose: function onClose() {\n              return N(j);\n            },\n            duration: D,\n            withClose: R,\n            isShown: !0,\n            variant: Z,\n            title: e == null ? void 0 : e.title,\n            cta: e == null ? void 0 : e.cta\n          },\n          F = o.current.find(function (tt) {\n            return tt.id === g.id;\n          });\n        return F || (i(r === \"top\" ? [g].concat(_toConsumableArray(o.current)) : [].concat(_toConsumableArray(o.current), [g])), g);\n      }, [N, C, o, r, i]);\n    return t(\"close\", d), t(\"show\", L), t(\"closeAll\", B), t(\"setPlacement\", V), t(\"setDuration\", M), c.createElement(\"div\", {\n      \"data-test-id\": \"cf-notification-container\",\n      className: cx(S.manager)\n    }, c.createElement(\"div\", {\n      className: cx(S.container)\n    }, o.current.map(function (n) {\n      return c.createElement(P, {\n        variant: n.variant,\n        duration: n.duration,\n        key: n.id,\n        withCloseButton: n.withClose,\n        onClose: n.onClose,\n        isShown: n.isShown,\n        title: n.title,\n        cta: n.cta\n      }, n.text);\n    })));\n  };\nI.displayName = \"NotificationsManager\";\nvar Y = !1,\n  l = {};\nfunction Bt(t, o) {\n  l[t] = o;\n}\nfunction Dt(t) {\n  var o = document.createElement(\"div\");\n  document.body.appendChild(o), render(c.createElement(I, {\n    register: Bt\n  }), o, t);\n}\nfunction h(t) {\n  return function () {\n    for (var _len = arguments.length, o = new Array(_len), _key = 0; _key < _len; _key++) {\n      o[_key] = arguments[_key];\n    }\n    return Y ? Promise.resolve(t.apply(void 0, o)) : (Y = !0, new Promise(function (i) {\n      Dt(function () {\n        i(t.apply(void 0, o));\n      });\n    }));\n  };\n}\nvar T = function T(t) {\n    return function (o, i) {\n      if (l.show) return l.show(o, f(m({}, i || {}), {\n        variant: t\n      }));\n    };\n  },\n  Et = {\n    success: h(T(\"positive\")),\n    error: h(T(\"negative\")),\n    warning: h(T(\"warning\")),\n    info: h(T(\"primary\")),\n    close: h(function (t) {\n      if (l.close) return l.close(t);\n    }),\n    closeAll: h(function () {\n      if (l.closeAll) return l.closeAll();\n    }),\n    setPlacement: h(function (t, o) {\n      if (l.setPlacement) return l.setPlacement(t, o);\n    }),\n    setDuration: h(function (t) {\n      if (l.setDuration) return l.setDuration(t);\n    })\n  };\nexport { Et as Notification, A as NotificationItem, P as NotificationItemContainer, I as NotificationsManager };","map":{"version":3,"names":[],"sources":["/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-notification/src/Notification.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-notification/src/NotificationsManager/NotificationsManager.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-notification/src/NotificationsManager/useAsyncState.ts","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-notification/src/NotificationItem/NotificationItem.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-notification/src/NotificationItem/NotificationItem.styles.ts","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-notification/src/NotificationItem/NotificationItemContainer.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-notification/src/NotificationsManager/NotificationsManager.styles.ts"],"sourcesContent":["/* global Promise */\n\nimport React from 'react';\nimport { render } from 'react-dom';\nimport {\n  NotificationsManager,\n  ShowAction,\n  CloseAction,\n  CloseAllAction,\n  SetPlacementAction,\n  SetDurationAction,\n  NotificationProps,\n  Placement,\n} from './NotificationsManager';\nimport type { NotificationVariant, NotificationCta } from './types';\n\nexport interface NotificationsAPI {\n  success: ShowAction<Notification>;\n  error: ShowAction<Notification>;\n  show: ShowAction<Notification>;\n  close: CloseAction<void>;\n  closeAll: CloseAllAction<void>;\n  setPlacement: SetPlacementAction<void>;\n  setDuration: SetDurationAction<void>;\n}\n\nlet initiated = false;\nconst internalAPI: Partial<NotificationsAPI> = {};\n\nfunction registerAPI(fnName: string, fn: Function) {\n  internalAPI[fnName] = fn;\n}\n\nfunction createRoot(callback: () => void) {\n  const container = document.createElement('div');\n  document.body.appendChild(container);\n\n  render(<NotificationsManager register={registerAPI} />, container, callback);\n}\n\nfunction afterInit<PromiseValueType>(fn: Function) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (...args: any[]) => {\n    if (!initiated) {\n      initiated = true;\n      return new Promise<PromiseValueType>((resolve) => {\n        createRoot(() => {\n          resolve(fn(...args));\n        });\n      });\n    } else {\n      return Promise.resolve<PromiseValueType>(fn(...args));\n    }\n  };\n}\n\nconst show =\n  (variant: NotificationVariant) =>\n  (\n    text: string,\n    settings?: {\n      duration?: number;\n      withClose?: boolean;\n      id?: string;\n      title?: string;\n      cta?: Partial<NotificationCta>;\n    },\n  ) => {\n    if (internalAPI.show) {\n      return internalAPI.show(text, {\n        ...(settings || {}),\n        variant,\n      });\n    }\n  };\n\ntype ExternalShowAction<T> = (\n  text: string,\n  settings?: {\n    duration?: number;\n    withClose?: boolean;\n    id?: string;\n    title?: string;\n    cta?: Partial<NotificationCta>;\n  },\n) => T;\n\nexport const Notification: {\n  success: ExternalShowAction<Promise<NotificationProps>>;\n  error: ExternalShowAction<Promise<NotificationProps>>;\n  warning: ExternalShowAction<Promise<NotificationProps>>;\n  info: ExternalShowAction<Promise<NotificationProps>>;\n  close: CloseAction<Promise<void>>;\n  closeAll: CloseAllAction<Promise<void>>;\n  setPlacement: SetPlacementAction<Promise<void>>;\n  setDuration: SetDurationAction<Promise<void>>;\n} = {\n  success: afterInit<NotificationProps>(show('positive')),\n  error: afterInit<NotificationProps>(show('negative')),\n  warning: afterInit<NotificationProps>(show('warning')),\n  info: afterInit<NotificationProps>(show('primary')),\n  close: afterInit<void>((id: string | number) => {\n    if (internalAPI.close) {\n      return internalAPI.close(id);\n    }\n  }),\n  closeAll: afterInit<void>(() => {\n    if (internalAPI.closeAll) {\n      return internalAPI.closeAll();\n    }\n  }),\n  setPlacement: afterInit<void>(\n    (placement: Placement, params?: { offset: number }) => {\n      if (internalAPI.setPlacement) {\n        return internalAPI.setPlacement(placement, params);\n      }\n    },\n  ),\n  setDuration: afterInit<void>((duration: number) => {\n    if (internalAPI.setDuration) {\n      return internalAPI.setDuration(duration);\n    }\n  }),\n};\n","import React, { useCallback, useState } from 'react';\nimport { cx } from 'emotion';\n\nimport { useAsyncState } from './useAsyncState';\nimport type { NotificationCta, NotificationVariant } from '../types';\nimport { NotificationItemContainer } from '../NotificationItem';\nimport { getStyles } from './NotificationsManager.styles';\n\nexport type Placement = 'top' | 'bottom';\n\nexport interface NotificationProps {\n  id: string | number;\n  text: string;\n  onClose: Function;\n  duration?: number;\n  withClose: boolean;\n  isShown: boolean;\n  variant: NotificationVariant;\n  title?: string;\n  cta?: Partial<NotificationCta>;\n}\n\nexport type ShowAction<T> = (\n  text: string,\n  setting?: {\n    variant: NotificationVariant;\n    id?: string;\n    duration?: number;\n    withClose?: boolean;\n    title?: string;\n    cta?: Partial<NotificationCta>;\n  },\n) => T;\n\nexport type CloseAction<T> = (id: string | number) => T;\n\nexport type CloseAllAction<T> = () => T;\n\nexport type SetDurationAction<T> = (duration: number) => T;\n\nexport type SetPlacementAction<T> = (\n  placement: Placement,\n  params?: { offset: number },\n) => T;\n\nexport interface NotificationsManagerProps {\n  register: (name: string, callback: Function) => void;\n}\n\nlet uniqueId = 0;\n\nconst getUniqueId = (): number => {\n  uniqueId += 1;\n  return uniqueId;\n};\n\nexport const NotificationsManager = ({\n  register,\n}: NotificationsManagerProps): React.ReactElement => {\n  const [items, setItems] = useAsyncState<NotificationProps[]>([]);\n  const [placement, setPlacementState] = useState('bottom');\n  const [placementOffset, setPlacementOffset] = useState(20);\n  const [duration, setDuration] = useState(6000);\n  const styles = getStyles(placement, placementOffset);\n\n  const setPlacement: SetPlacementAction<void> = useCallback(\n    (placement, params?: { offset: number }) => {\n      if (placement === 'bottom' || placement === 'top') {\n        const placementOffset = params && params.offset ? params.offset : 20;\n        setPlacementState(placement);\n        setPlacementOffset(placementOffset);\n      }\n    },\n    [],\n  );\n\n  const close: CloseAction<void> = useCallback(\n    (id) => {\n      setItems(\n        items.current.map((item) => {\n          if (item.id !== id) {\n            return item;\n          }\n\n          return {\n            ...item,\n            isShown: false,\n          };\n        }),\n      );\n    },\n    [items, setItems],\n  );\n\n  const closeAndDelete = useCallback(\n    (id: string | number) => {\n      setItems(items.current.filter((item) => item.id !== id));\n    },\n    [items, setItems],\n  );\n\n  const closeAll: CloseAllAction<void> = useCallback(() => {\n    setItems(\n      items.current.map((item) => {\n        return {\n          ...item,\n          isShown: false,\n        };\n      }),\n    );\n  }, [items, setItems]);\n\n  const show: ShowAction<NotificationProps> = useCallback(\n    (text, settings) => {\n      const itemDuration =\n        settings && typeof settings.duration !== 'undefined' // Needed as 0 is falsy but 0 is valid to disable auto-closing a notification\n          ? settings.duration\n          : duration;\n      const variant = settings?.variant ? settings.variant : 'positive';\n\n      const withClose =\n        settings && typeof settings.withClose !== 'undefined'\n          ? settings.withClose\n          : true;\n\n      const notificationId = settings?.id ? settings.id : getUniqueId();\n\n      const notification = {\n        id: notificationId,\n        text,\n        onClose: () => closeAndDelete(notificationId),\n        duration: itemDuration,\n        withClose,\n        isShown: true,\n        variant,\n        title: settings?.title,\n        cta: settings?.cta,\n      };\n\n      const alreadyThere = items.current.find(\n        (item) => item.id === notification.id,\n      );\n\n      if (alreadyThere) {\n        return alreadyThere;\n      }\n\n      if (placement === 'top') {\n        setItems([notification, ...items.current]);\n      } else {\n        setItems([...items.current, notification]);\n      }\n\n      return notification;\n    },\n    [closeAndDelete, duration, items, placement, setItems],\n  );\n\n  register('close', close);\n  register('show', show);\n  register('closeAll', closeAll);\n  register('setPlacement', setPlacement);\n  register('setDuration', setDuration);\n\n  return (\n    <div\n      data-test-id=\"cf-notification-container\"\n      className={cx(styles.manager)}\n    >\n      <div className={cx(styles.container)}>\n        {items.current.map((item) => (\n          <NotificationItemContainer\n            variant={item.variant}\n            duration={item.duration}\n            key={item.id}\n            withCloseButton={item.withClose}\n            // eslint-disable-next-line react/jsx-handler-names\n            onClose={item.onClose}\n            isShown={item.isShown}\n            title={item.title}\n            cta={item.cta}\n          >\n            {item.text}\n          </NotificationItemContainer>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nNotificationsManager.displayName = 'NotificationsManager';\n","import { useRef, useState } from 'react';\n\n/**\n * An asyncronous state hook.\n *\n * Think of it as a slight modification of React's `useState` hook, where the\n * state returned is instead a `MutableRefObject` like you know it from the\n * `useRef` hook.\n *\n * @param value\n * @returns A tuple with the `MutableRefObject` and a function to set the state\n */\nexport function useAsyncState<ValueType>(\n  value: ValueType,\n): [React.MutableRefObject<ValueType>, (state: ValueType) => void] {\n  const ref = useRef<ValueType>(value);\n  const [, forceUpdate] = useState(false);\n\n  const setState = (newState: ValueType) => {\n    if (!Object.is(ref.current, newState)) {\n      ref.current = newState;\n      forceUpdate((state) => !state);\n    }\n  };\n\n  return [ref, setState];\n}\n","import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  CheckCircleIcon,\n  ErrorCircleIcon,\n  WarningIcon,\n  CloseIcon,\n  InfoCircleIcon,\n} from '@contentful/f36-icons';\nimport { Button } from '@contentful/f36-button';\nimport { TextLink } from '@contentful/f36-text-link';\nimport {\n  Flex,\n  Box,\n  type ExpandProps,\n  type CommonProps,\n} from '@contentful/f36-core';\nimport { Heading, Paragraph } from '@contentful/f36-typography';\n\nimport type { NotificationVariant, NotificationCta } from '../types';\nimport { getStyles } from './NotificationItem.styles';\n\nexport interface NotificationItemProps extends CommonProps {\n  /**\n   * Defines the styling of notification\n   * @default positive\n   */\n  variant?: NotificationVariant;\n  /**\n   * Defines if the close button should be rendered\n   * @default true\n   */\n  withCloseButton?: boolean;\n  /**\n   * Function that will be triggered when close button is clicked\n   */\n  onClose?: Function;\n  /**\n   * Title of the notification\n   */\n  title?: string;\n  /**\n   * Content of the notificaiton\n   */\n  children: React.ReactNode;\n  /**\n   * Label and text-link props of the CTA\n   */\n  cta?: Partial<NotificationCta>;\n}\n\nconst _NotificationItem = (props: ExpandProps<NotificationItemProps>, ref) => {\n  const {\n    className,\n    children,\n    cta,\n    withCloseButton = true,\n    variant = 'positive',\n    onClose,\n    testId = 'cf-ui-notification',\n    title,\n    ...otherProps\n  } = props;\n\n  const styles = getStyles({ variant });\n\n  const iconSize = title ? 'medium' : 'small';\n  const iconVariants = {\n    positive: <CheckCircleIcon variant={variant} size={iconSize} />,\n    warning: <WarningIcon variant={variant} size={iconSize} />,\n    negative: <ErrorCircleIcon variant={variant} size={iconSize} />,\n    primary: <InfoCircleIcon variant={variant} size={iconSize} />,\n  };\n\n  const intents = {\n    positive: 'success',\n    warning: 'warning',\n    negative: 'error',\n    primary: 'info',\n  };\n\n  return (\n    <Flex\n      data-test-id={testId}\n      role=\"alert\"\n      data-intent={intents[variant]}\n      aria-live={variant === 'positive' ? 'polite' : 'assertive'}\n      className={cx(styles.wrapper, className)}\n      {...otherProps}\n      ref={ref}\n    >\n      <Box className={cx(styles.icon)}>{iconVariants[variant]}</Box>\n      <Box className={cx(styles.notification)}>\n        {title && (\n          <Heading\n            as=\"h2\"\n            className={cx(styles.title)}\n            marginBottom=\"spacingXs\"\n          >\n            {title}\n          </Heading>\n        )}\n        {children && (\n          <Paragraph className={styles.content} marginBottom=\"spacingXs\">\n            {children}\n          </Paragraph>\n        )}\n        {cta?.label && (\n          <TextLink\n            {...cta?.textLinkProps}\n            as={cta?.textLinkProps?.as || 'button'}\n          >\n            {cta.label}\n          </TextLink>\n        )}\n      </Box>\n      {withCloseButton && (\n        <Box>\n          <Button\n            className={cx(styles.closeButton)}\n            variant=\"transparent\"\n            startIcon={<CloseIcon />}\n            onClick={() => {\n              onClose && onClose();\n            }}\n            testId=\"cf-ui-notification-close\"\n            aria-label=\"Dismiss\"\n          />\n        </Box>\n      )}\n    </Flex>\n  );\n};\n\nexport const NotificationItem = React.forwardRef(_NotificationItem);\n","import { css } from 'emotion';\nimport type { CSSObject } from '@emotion/serialize';\nimport tokens from '@contentful/f36-tokens';\nimport type { NotificationVariant } from '../types';\n\nconst variantColors = {\n  positive: tokens.green600,\n  negative: tokens.red600,\n  warning: tokens.orange400,\n  primary: tokens.blue600,\n};\n\nconst getWrapperStyle = ({ variant }) =>\n  css({\n    background: tokens.colorWhite,\n    borderRadius: tokens.borderRadiusMedium,\n    boxShadow: tokens.boxShadowHeavy,\n    boxSizing: 'border-box',\n    display: 'flex',\n    overflow: 'hidden',\n    position: 'relative',\n    padding: tokens.spacingM,\n    width: '100%',\n    '&:before': {\n      backgroundColor: variantColors[variant],\n      content: '\"\"',\n      height: '100%',\n      left: 0,\n      position: 'absolute',\n      top: 0,\n      width: '2px',\n    },\n  });\n\nconst getIconStyle = ({ variant }) =>\n  css({\n    fill: variantColors[variant],\n    marginRight: tokens.spacingM,\n    alignItems: 'flex-start',\n  });\n\nconst notificationStyle: CSSObject = {\n  fontSize: tokens.fontSizeM,\n  lineHeight: tokens.lineHeightM,\n  width: '100%',\n};\n\nconst titleStyle: CSSObject = {\n  color: tokens.gray800,\n  fontSize: tokens.fontSizeL,\n  lineHeight: tokens.lineHeightL,\n};\n\nconst contentStyle: CSSObject = {\n  color: tokens.gray700,\n  wordBreak: 'break-word',\n  hyphens: 'auto',\n  '&:last-child': {\n    marginBottom: 0,\n  },\n};\n\nconst closeButtonStyle: CSSObject = {\n  marginBottom: `-${tokens.spacingXs}`,\n  marginRight: `-${tokens.spacingXs}`,\n  marginTop: `-${tokens.spacingXs}`,\n};\n\nexport const getStyles = ({ variant }: { variant: NotificationVariant }) => ({\n  wrapper: getWrapperStyle({ variant }),\n  icon: getIconStyle({ variant }),\n  notification: css(notificationStyle),\n  title: css(titleStyle),\n  content: css(contentStyle),\n  closeButton: css(closeButtonStyle),\n});\n","import React, { Component } from 'react';\nimport AnimateHeight from 'react-animate-height';\n\nimport { NotificationItem, NotificationItemProps } from './NotificationItem';\nimport { cx, css } from 'emotion';\n\nexport interface NotificationItemContainerProps extends NotificationItemProps {\n  duration?: number;\n  isShown?: boolean;\n}\n\nexport interface NotificationItemContainerState {\n  isShown: boolean;\n}\n\nconst defaultProps: Partial<NotificationItemContainerProps> = {\n  isShown: false,\n};\n\nexport class NotificationItemContainer extends Component<\n  NotificationItemContainerProps,\n  NotificationItemContainerState\n> {\n  static defaultProps = defaultProps;\n  displayName: 'NotificationItemContainer';\n\n  timer: number | null = null;\n\n  state = {\n    isShown: false,\n  };\n\n  componentDidMount() {\n    this.startTimer();\n    this.setState({ isShown: true });\n  }\n\n  componentDidUpdate(prevProps: NotificationItemContainerProps) {\n    if (prevProps.isShown !== this.props.isShown) {\n      this.setState({\n        isShown: this.props.isShown!, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.stopTimer();\n  }\n\n  startTimer = () => {\n    if (this.props.duration) {\n      if (this.props.duration === 0) return;\n\n      this.timer = window.setTimeout(() => {\n        this.handleClose();\n      }, this.props.duration);\n    }\n  };\n\n  stopTimer = () => {\n    if (this.props.duration === 0) return;\n\n    if (this.timer) {\n      clearTimeout(this.timer);\n      this.timer = null;\n    }\n  };\n\n  handleClose = () => {\n    this.stopTimer();\n    this.setState({ isShown: false });\n  };\n\n  handleMouseEnter = () => {\n    this.stopTimer();\n  };\n\n  handleMouseLeave = () => {\n    this.startTimer();\n  };\n\n  render() {\n    const { isShown, duration, ...otherProps } = this.props;\n    return (\n      <AnimateHeight\n        duration={200}\n        height={this.state.isShown ? 'auto' : 0}\n        easing=\"ease-in-out\"\n        animateOpacity\n        onHeightAnimationEnd={() => {\n          if (this.state.isShown === false) {\n            if (this.props.onClose) {\n              this.props.onClose();\n            }\n          }\n        }}\n      >\n        <div\n          className={cx(css({ pointerEvents: 'all' }))}\n          onMouseEnter={this.handleMouseEnter}\n          onMouseLeave={this.handleMouseLeave}\n        >\n          <NotificationItem {...otherProps} onClose={this.handleClose} />\n        </div>\n      </AnimateHeight>\n    );\n  }\n}\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getStyles = (placement, placementOffset) => ({\n  manager: css({\n    left: 0,\n    margin: '0 auto',\n    maxWidth: '560px',\n    position: 'fixed',\n    pointerEvents: 'none',\n    right: 0,\n    [placement]: placementOffset,\n    zIndex: tokens.zIndexNotification,\n  }),\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n    margin: '0 auto',\n    maxWidth: '560px',\n    minWidth: '360px',\n    '& > div': {\n      marginBottom: placement === 'top' ? 0 : tokens.spacingS,\n      marginTop: placement === 'top' ? tokens.spacingS : 0,\n    },\n  }),\n});\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}