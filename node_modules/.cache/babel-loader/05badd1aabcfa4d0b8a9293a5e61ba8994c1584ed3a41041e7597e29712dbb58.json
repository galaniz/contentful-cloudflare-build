{"ast":null,"code":"var _jsxFileName = \"/Users/gracielaalaniz/Documents/cloudflare-build/src/locations/ConfigScreen.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useEffect } from 'react';\nimport { Heading, Form, FormControl, TextInput, Flex } from '@contentful/f36-components';\nimport { css } from 'emotion';\nimport { useSDK } from '@contentful/react-apps-toolkit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ConfigScreen = () => {\n  _s();\n  const [parameters, setParameters] = useState({});\n  const [fields, setFields] = useState([{\n    type: 'text',\n    name: 'cb_account_id',\n    label: 'Account Identifier',\n    helpText: 'Example: 023e105f4ecef8ad9ca31a8372d0c353',\n    required: true\n  }, {\n    type: 'email',\n    name: 'cb_account_email',\n    label: 'Account Email',\n    required: true\n  }, {\n    type: 'text',\n    name: 'cb_api_key',\n    label: 'API Key',\n    required: true\n  }, {\n    type: 'text',\n    name: 'cb_api_proxy_url',\n    label: 'API Proxy URL',\n    required: true\n  }, {\n    type: 'text',\n    name: 'cb_project_name',\n    label: 'Project Name',\n    helpText: 'Example: this-is-my-project-01',\n    required: true\n  }]);\n  const sdk = useSDK();\n  const onConfigure = useCallback(async () => {\n    // This method will be called when a user clicks on 'Install'\n    // or 'Save' in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await sdk.app.getCurrentState();\n    console.log('SAVE', currentState);\n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState\n    };\n  }, [parameters, sdk]);\n  useEffect(() => {\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    sdk.app.onConfigure(() => onConfigure());\n  }, [sdk, onConfigure]);\n  useEffect(() => {\n    (async () => {\n      // Get current parameters of the app.\n      // If the app is not installed yet, `parameters` will be `null`.\n      const currentParameters = await sdk.app.getParameters();\n      if (currentParameters) {\n        let currentFields = [...fields];\n        currentFields = currentFields.map(f => {\n          const {\n            name\n          } = f;\n          if (Object.getOwnPropertyDescriptor(currentParameters, name)) {\n            f.value = currentParameters[name];\n          }\n          return f;\n        });\n        setParameters(currentParameters);\n        setFields(currentFields);\n      }\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      sdk.app.setReady();\n    })();\n  }, [sdk]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    flexDirection: \"column\",\n    className: css({\n      margin: '80px',\n      maxWidth: '800px'\n    }),\n    children: /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        children: \"Cloudflare Build Config\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), fields.map(field => {\n        const {\n          type = 'text',\n          required = false,\n          helpText = '',\n          value = '',\n          name,\n          label\n        } = field;\n        if (!name || !label) {\n          return '';\n        }\n        return /*#__PURE__*/_jsxDEV(FormControl, {\n          isRequired: required,\n          children: [/*#__PURE__*/_jsxDEV(FormControl.Label, {\n            children: label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextInput, {\n            value: value,\n            type: type,\n            name: name,\n            onChange: e => {\n              const currentValue = e.target.value;\n              let currentFields = [...fields];\n              let currentParams = {\n                ...parameters\n              };\n              currentParams[name] = currentValue;\n              currentFields = currentFields.map(f => {\n                if (f.name === name) {\n                  f.value = currentValue;\n                }\n                return f;\n              });\n              setFields(currentFields);\n              setParameters(currentParams);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this), helpText && /*#__PURE__*/_jsxDEV(FormControl.HelpText, {\n            children: helpText\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 144,\n            columnNumber: 17\n          }, this)]\n        }, name, true, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n_s(ConfigScreen, \"L7TU+W2mv5xfVHIvcgKPHzrh9zc=\", false, function () {\n  return [useSDK];\n});\n_c = ConfigScreen;\nexport default ConfigScreen;\nvar _c;\n$RefreshReg$(_c, \"ConfigScreen\");","map":{"version":3,"names":["React","useCallback","useState","useEffect","Heading","Form","FormControl","TextInput","Flex","css","useSDK","jsxDEV","_jsxDEV","ConfigScreen","_s","parameters","setParameters","fields","setFields","type","name","label","helpText","required","sdk","onConfigure","currentState","app","getCurrentState","console","log","targetState","currentParameters","getParameters","currentFields","map","f","Object","getOwnPropertyDescriptor","value","setReady","flexDirection","className","margin","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","field","isRequired","Label","onChange","e","currentValue","target","currentParams","HelpText","_c","$RefreshReg$"],"sources":["/Users/gracielaalaniz/Documents/cloudflare-build/src/locations/ConfigScreen.jsx"],"sourcesContent":["import React, { useCallback, useState, useEffect } from 'react';\nimport { Heading, Form, FormControl, TextInput, Flex } from '@contentful/f36-components';\nimport { css } from 'emotion';\nimport { useSDK } from '@contentful/react-apps-toolkit';\n\nconst ConfigScreen = () => {\n  const [parameters, setParameters] = useState({});\n  const [fields, setFields] = useState([\n    {\n      type: 'text',\n      name: 'cb_account_id',\n      label: 'Account Identifier',\n      helpText: 'Example: 023e105f4ecef8ad9ca31a8372d0c353',\n      required: true\n    },\n    {\n      type: 'email',\n      name: 'cb_account_email',\n      label: 'Account Email',\n      required: true\n    },\n    {\n      type: 'text',\n      name: 'cb_api_key',\n      label: 'API Key',\n      required: true\n    },\n    {\n      type: 'text',\n      name: 'cb_api_proxy_url',\n      label: 'API Proxy URL',\n      required: true\n    },\n    {\n      type: 'text',\n      name: 'cb_project_name',\n      label: 'Project Name',\n      helpText: 'Example: this-is-my-project-01',\n      required: true\n    }\n  ])\n  const sdk = useSDK();\n\n  const onConfigure = useCallback(async () => {\n    // This method will be called when a user clicks on 'Install'\n    // or 'Save' in the configuration screen.\n    // for more details see https://www.contentful.com/developers/docs/extensibility/ui-extensions/sdk-reference/#register-an-app-configuration-hook\n\n    // Get current the state of EditorInterface and other entities\n    // related to this app installation\n    const currentState = await sdk.app.getCurrentState();\n\n    console.log('SAVE', currentState);\n    \n    return {\n      // Parameters to be persisted as the app configuration.\n      parameters,\n      // In case you don't want to submit any update to app\n      // locations, you can just pass the currentState as is\n      targetState: currentState,\n    };\n  }, [parameters, sdk]);\n\n  useEffect(() => {\n    // `onConfigure` allows to configure a callback to be\n    // invoked when a user attempts to install the app or update\n    // its configuration.\n    sdk.app.onConfigure(() => onConfigure());\n  }, [sdk, onConfigure]);\n\n  useEffect(() => {\n    (async () => {\n      // Get current parameters of the app.\n      // If the app is not installed yet, `parameters` will be `null`.\n      const currentParameters = await sdk.app.getParameters();\n\n      if (currentParameters) {\n        let currentFields = [...fields];\n\n        currentFields = currentFields.map((f) => {\n          const { name } = f;\n\n          if (Object.getOwnPropertyDescriptor(currentParameters, name)) {\n            f.value = currentParameters[name];\n          }\n\n          return f;\n        })\n\n        setParameters(currentParameters);\n        setFields(currentFields);\n      }\n      // Once preparation has finished, call `setReady` to hide\n      // the loading screen and present the app to a user.\n      sdk.app.setReady();\n    })();\n  }, [sdk]);\n\n  return (\n    <Flex flexDirection=\"column\" className={css({ margin: '80px', maxWidth: '800px' })}>\n      <Form>\n        <Heading>Cloudflare Build Config</Heading>\n        {fields.map((field) => {\n          const {\n            type = 'text',\n            required = false,\n            helpText = '',\n            value = '',\n            name,\n            label\n          } = field;\n\n          if (!name || !label) {\n            return '';\n          }\n\n          return (\n            <FormControl key={name} isRequired={required}>\n              <FormControl.Label>{label}</FormControl.Label>\n              <TextInput\n                value={value}\n                type={type}\n                name={name}\n                onChange={(e) => {\n                  const currentValue = e.target.value;\n                  let currentFields = [...fields];\n                  let currentParams = {...parameters};\n\n                  currentParams[name] = currentValue;\n\n                  currentFields = currentFields.map((f) => {\n                    if (f.name === name) {\n                      f.value = currentValue;\n                    }\n\n                    return f;\n                  })\n\n                  setFields(currentFields);\n                  setParameters(currentParams);\n                }}\n              />\n              {helpText && (\n                <FormControl.HelpText>{helpText}</FormControl.HelpText>\n              )}\n            </FormControl>\n          );\n        })}\n      </Form>\n    </Flex>\n  );\n};\n\nexport default ConfigScreen;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}