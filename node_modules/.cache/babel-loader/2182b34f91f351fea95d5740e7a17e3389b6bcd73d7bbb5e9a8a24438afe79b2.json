{"ast":null,"code":"import _defineProperty from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _createForOfIteratorHelper from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport i from 'react';\nimport { cx, css } from 'emotion';\nimport { Flex } from '@contentful/f36-core';\nimport t from '@contentful/f36-tokens';\nvar w = Object.defineProperty,\n  A = Object.defineProperties;\nvar C = Object.getOwnPropertyDescriptors;\nvar p = Object.getOwnPropertySymbols;\nvar k = Object.prototype.hasOwnProperty,\n  g = Object.prototype.propertyIsEnumerable;\nvar L = function L(o, e, n) {\n    return e in o ? w(o, e, {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: n\n    }) : o[e] = n;\n  },\n  a = function a(o, e) {\n    for (var n in e || (e = {})) k.call(e, n) && L(o, n, e[n]);\n    if (p) {\n      var _iterator = _createForOfIteratorHelper(p(e)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var n = _step.value;\n          g.call(e, n) && L(o, n, e[n]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    return o;\n  },\n  c = function c(o, e) {\n    return A(o, C(e));\n  };\nvar h = function h(o, e) {\n  var n = {};\n  for (var r in o) k.call(o, r) && e.indexOf(r) < 0 && (n[r] = o[r]);\n  if (o != null && p) {\n    var _iterator2 = _createForOfIteratorHelper(p(o)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var r = _step2.value;\n        e.indexOf(r) < 0 && g.call(o, r) && (n[r] = o[r]);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return n;\n};\nvar D = function D(o) {\n    switch (o) {\n      case \"primary\":\n        return {\n          color: t.blue600,\n          \"&:hover, &:focus\": {\n            color: t.blue700\n          }\n        };\n      case \"secondary\":\n        return {\n          color: t.gray600,\n          \"&:hover, &:focus\": {\n            color: t.gray700\n          }\n        };\n      case \"positive\":\n        return {\n          color: t.green600,\n          \"&:hover, &:focus\": {\n            color: t.green700\n          }\n        };\n      case \"negative\":\n        return {\n          color: t.red600,\n          \"&:hover, &:focus\": {\n            color: t.red700\n          }\n        };\n      case \"muted\":\n        return {\n          color: t.gray400,\n          \"&:hover, &:focus\": {\n            color: t.gray500\n          }\n        };\n      case \"white\":\n        return {\n          color: t.colorWhite,\n          \"&:hover, &:focus\": {\n            color: t.gray100\n          }\n        };\n      default:\n        return {\n          color: t.colorWhite\n        };\n    }\n  },\n  R = function R(_ref) {\n    var o = _ref.variant,\n      e = _ref.isDisabled;\n    return css(c(a({\n      display: \"inline-flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      boxSizing: \"border-box\",\n      border: 0,\n      padding: 0,\n      margin: 0,\n      fontFamily: t.fontStackPrimary,\n      fontSize: t.fontSizeM,\n      fontWeight: t.fontWeightMedium,\n      transition: \"color \".concat(t.transitionDurationShort, \" \").concat(t.transitionEasingDefault),\n      textDecoration: \"none\",\n      background: \"none\",\n      appearance: \"none\",\n      whiteSpace: \"normal\",\n      textAlign: \"left\",\n      cursor: e ? \"not-allowed\" : \"pointer\",\n      opacity: e ? .5 : 1\n    }, D(o)), {\n      outline: \"none\",\n      verticalAlign: \"bottom\",\n      \"&:focus, &:focus-visible, &:hover\": {\n        textDecoration: e ? \"none\" : \"underline\"\n      },\n      \"&:focus\": {\n        boxShadow: e ? \"none\" : t.glowPrimary,\n        borderRadius: t.borderRadiusSmall\n      },\n      \"&:focus:not(:focus-visible)\": {\n        borderRadius: 0,\n        boxShadow: \"none\"\n      },\n      \"&:focus-visible\": {\n        borderRadius: t.borderRadiusSmall,\n        boxShadow: e ? \"none\" : t.glowPrimary\n      }\n    }));\n  },\n  F = function F() {\n    return css({\n      fill: \"currentColor\",\n      transition: \"fill \".concat(t.transitionDurationShort, \" \").concat(t.transitionEasingDefault)\n    });\n  },\n  X = function X(_ref2) {\n    var o = _ref2.alignIcon;\n    if (o === \"start\") return css({\n      marginLeft: t.spacing2Xs\n    });\n    if (o === \"end\") return css({\n      marginRight: t.spacing2Xs\n    });\n  },\n  f = {\n    textLink: R,\n    textLinkIcon: F,\n    textLinkText: X\n  };\nvar G = \"a\";\nfunction P(o, e) {\n  var y = o,\n    n = y.children,\n    r = y.className,\n    _y$testId = y.testId,\n    E = _y$testId === void 0 ? \"cf-ui-text-link\" : _y$testId,\n    _y$variant = y.variant,\n    v = _y$variant === void 0 ? \"primary\" : _y$variant,\n    I = y.href,\n    s = y.icon,\n    _y$alignIcon = y.alignIcon,\n    u = _y$alignIcon === void 0 ? \"start\" : _y$alignIcon,\n    l = y.isDisabled,\n    _y$as = y.as,\n    S = _y$as === void 0 ? G : _y$as,\n    _ = h(y, [\"children\", \"className\", \"testId\", \"variant\", \"href\", \"icon\", \"alignIcon\", \"isDisabled\", \"as\"]),\n    d = a(_defineProperty({\n      ref: e,\n      className: cx(f.textLink({\n        variant: v,\n        isDisabled: l\n      }), o.className)\n    }, \"data-test-id\", E), _),\n    x = s ? i.createElement(Flex, {\n      as: \"span\"\n    }, i.cloneElement(s, {\n      className: cx(s.props.className, f.textLinkIcon()),\n      size: \"small\"\n    })) : null,\n    T = i.createElement(i.Fragment, null, s && u === \"start\" && x, n && i.createElement(\"span\", {\n      className: f.textLinkText({\n        alignIcon: s ? u : void 0\n      })\n    }, n), s && u === \"end\" && x);\n  return S === \"button\" ? i.createElement(\"button\", c(a({}, d), {\n    disabled: l,\n    type: \"button\"\n  }), T) : i.createElement(\"a\", a(c(a({}, d), {\n    onClick: l ? function (N) {\n      N.preventDefault();\n    } : d.onClick,\n    href: I\n  }), l ? {\n    tabIndex: -1\n  } : {}), T);\n}\nP.displayName = \"TextLink\";\nvar K = i.forwardRef(P);\nexport { K as TextLink };","map":{"version":3,"names":[],"sources":["/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-text-link/src/TextLink.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-text-link/src/TextLink.styles.ts"],"sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport {\n  Flex,\n  type CommonProps,\n  type PolymorphicProps,\n  type PolymorphicComponent,\n  type ExpandProps,\n} from '@contentful/f36-core';\n\nimport { styles } from './TextLink.styles';\nimport { TextLinkVariant } from './types';\n\nconst TEXT_LINK_DEFAULT_TAG = 'a';\n\ninterface TextLinkInternalProps extends CommonProps {\n  children?: React.ReactNode;\n  /**\n   * Determines style variation of TextLink component\n   * @default primary\n   */\n  variant?: TextLinkVariant;\n  /**\n   * Disabled interaction and applies disabled styles\n   * @default false\n   */\n  isDisabled?: boolean;\n  /**\n   * Expects any of the icon components\n   */\n  icon?: React.ReactElement;\n  /**\n   * Determines the icon position regarding the link text\n   * @default start\n   */\n  alignIcon?: 'start' | 'end';\n  /**\n   * The element used for the root node.\n   * @default a\n   */\n  as?: 'a' | 'button';\n}\n\nexport type TextLinkProps<\n  E extends React.ElementType = typeof TEXT_LINK_DEFAULT_TAG,\n> = PolymorphicProps<TextLinkInternalProps, E, 'disabled'>;\n\nfunction _TextLink<E extends React.ElementType = typeof TEXT_LINK_DEFAULT_TAG>(\n  props: TextLinkProps<E>,\n  ref: React.Ref<any>,\n) {\n  const {\n    children,\n    className,\n    testId = 'cf-ui-text-link',\n    variant = 'primary',\n    href,\n    icon,\n    alignIcon = 'start',\n    isDisabled,\n    as = TEXT_LINK_DEFAULT_TAG,\n    ...otherProps\n  } = props;\n\n  const commonProps = {\n    ref,\n    className: cx(\n      styles.textLink({\n        variant,\n        isDisabled,\n      }),\n      props.className,\n    ),\n    ['data-test-id']: testId,\n    ...otherProps,\n  };\n\n  const iconContent = icon ? (\n    <Flex as=\"span\">\n      {React.cloneElement(icon, {\n        className: cx(icon.props.className, styles.textLinkIcon()),\n        size: 'small',\n      })}\n    </Flex>\n  ) : null;\n\n  const commonContent = (\n    <>\n      {icon && alignIcon === 'start' && iconContent}\n      {children && (\n        <span\n          className={styles.textLinkText({\n            alignIcon: icon ? alignIcon : undefined,\n          })}\n        >\n          {children}\n        </span>\n      )}\n      {icon && alignIcon === 'end' && iconContent}\n    </>\n  );\n\n  if (as === 'button') {\n    return (\n      <button {...commonProps} disabled={isDisabled} type=\"button\">\n        {commonContent}\n      </button>\n    );\n  }\n\n  return (\n    <a\n      {...commonProps}\n      onClick={\n        isDisabled\n          ? (e) => {\n              e.preventDefault();\n            }\n          : commonProps.onClick\n      }\n      href={href}\n      {...(isDisabled ? { tabIndex: -1 } : {})}\n    >\n      {commonContent}\n    </a>\n  );\n}\n\n_TextLink.displayName = 'TextLink';\n\nexport const TextLink: PolymorphicComponent<\n  ExpandProps<TextLinkInternalProps>,\n  typeof TEXT_LINK_DEFAULT_TAG,\n  'disabled'\n> = React.forwardRef(_TextLink);\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { TextLinkProps } from './TextLink';\nimport { TextLinkVariant } from './types';\n\nconst variantToStyles = (variant: TextLinkVariant) => {\n  switch (variant) {\n    case 'primary':\n      return {\n        color: tokens.blue600,\n        '&:hover, &:focus': {\n          color: tokens.blue700,\n        },\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray600,\n        '&:hover, &:focus': {\n          color: tokens.gray700,\n        },\n      };\n    case 'positive':\n      return {\n        color: tokens.green600,\n        '&:hover, &:focus': {\n          color: tokens.green700,\n        },\n      };\n    case 'negative':\n      return {\n        color: tokens.red600,\n        '&:hover, &:focus': {\n          color: tokens.red700,\n        },\n      };\n    case 'muted':\n      return {\n        color: tokens.gray400,\n        '&:hover, &:focus': {\n          color: tokens.gray500,\n        },\n      };\n    case 'white':\n      return {\n        color: tokens.colorWhite,\n        '&:hover, &:focus': {\n          color: tokens.gray100,\n        },\n      };\n    default:\n      return { color: tokens.colorWhite };\n  }\n};\n\nconst textLink = ({\n  variant,\n  isDisabled,\n}: Pick<TextLinkProps, 'variant' | 'isDisabled'>) =>\n  css({\n    display: 'inline-flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    boxSizing: 'border-box',\n    border: 0,\n    padding: 0,\n    margin: 0, // remove the default button margin in Safari.\n    fontFamily: tokens.fontStackPrimary,\n    fontSize: tokens.fontSizeM,\n    fontWeight: tokens.fontWeightMedium,\n    transition: `color ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault}`,\n    textDecoration: 'none',\n    background: 'none',\n    appearance: 'none',\n    whiteSpace: 'normal',\n    textAlign: 'left',\n    cursor: isDisabled ? 'not-allowed' : 'pointer',\n    opacity: isDisabled ? 0.5 : 1,\n    ...variantToStyles(variant),\n    outline: 'none',\n    verticalAlign: 'bottom',\n    '&:focus, &:focus-visible, &:hover': {\n      textDecoration: isDisabled ? 'none' : 'underline',\n    },\n    '&:focus': {\n      boxShadow: isDisabled ? 'none' : tokens.glowPrimary,\n      borderRadius: tokens.borderRadiusSmall,\n    },\n    '&:focus:not(:focus-visible)': {\n      borderRadius: 0,\n      boxShadow: 'none',\n    },\n    '&:focus-visible': {\n      borderRadius: tokens.borderRadiusSmall,\n      boxShadow: isDisabled ? 'none' : tokens.glowPrimary,\n    },\n  });\n\nconst textLinkIcon = () =>\n  css({\n    fill: 'currentColor',\n    transition: `fill ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault}`,\n  });\n\nconst textLinkText = ({ alignIcon }: Pick<TextLinkProps, 'alignIcon'>) => {\n  if (alignIcon === 'start') {\n    return css({\n      marginLeft: tokens.spacing2Xs,\n    });\n  }\n\n  if (alignIcon === 'end') {\n    return css({\n      marginRight: tokens.spacing2Xs,\n    });\n  }\n};\n\nexport const styles = {\n  textLink,\n  textLinkIcon,\n  textLinkText,\n};\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}