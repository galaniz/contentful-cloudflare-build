{"ast":null,"code":"import _slicedToArray from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport n from 'react';\nimport { cx, css } from 'emotion';\nimport { Tooltip } from '@contentful/f36-tooltip';\nimport { DragIcon, CloseIcon } from '@contentful/f36-icons';\nimport { Button } from '@contentful/f36-button';\nimport o from '@contentful/f36-tokens';\nvar E = Object.defineProperty;\nvar s = Object.getOwnPropertySymbols;\nvar P = Object.prototype.hasOwnProperty,\n  y = Object.prototype.propertyIsEnumerable;\nvar f = function f(t, e, r) {\n    return e in t ? E(t, e, {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: r\n    }) : t[e] = r;\n  },\n  p = function p(t, e) {\n    for (var r in e || (e = {})) P.call(e, r) && f(t, r, e[r]);\n    if (s) {\n      var _iterator = _createForOfIteratorHelper(s(e)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var r = _step.value;\n          y.call(e, r) && f(t, r, e[r]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    return t;\n  };\nvar b = function b(t, e) {\n  var r = {};\n  for (var a in t) P.call(t, a) && e.indexOf(a) < 0 && (r[a] = t[a]);\n  if (t != null && s) {\n    var _iterator2 = _createForOfIteratorHelper(s(t)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var a = _step2.value;\n        e.indexOf(a) < 0 && y.call(t, a) && (r[a] = t[a]);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return r;\n};\nvar H = function H() {\n    return css({\n      borderLeft: \"1px solid \".concat(o.gray400),\n      borderTopLeftRadius: 0,\n      borderBottomLeftRadius: 0,\n      padding: o.spacingXs,\n      minHeight: \"auto\",\n      transition: \"background \".concat(o.transitionDurationShort, \" \").concat(o.transitionEasingDefault, \",\\n    opacity \").concat(o.transitionDurationDefault, \" \").concat(o.transitionEasingDefault),\n      \"&:focus\": {\n        boxShadow: o.glowMuted,\n        borderLeftColor: o.gray300\n      },\n      \"&:hover, &:focus, &:active\": {\n        backgroundColor: o.gray300\n      }\n    });\n  },\n  L = function L() {\n    return css({\n      color: o.gray700,\n      lineHeight: o.lineHeightM,\n      padding: o.spacingXs,\n      fontSize: o.fontSizeM,\n      flexGrow: 2,\n      whiteSpace: \"nowrap\",\n      textOverflow: \"ellipsis\",\n      overflow: \"hidden\"\n    });\n  },\n  N = function N(t) {\n    var e = function e(r) {\n      switch (r) {\n        case \"active\":\n          return {\n            background: o.gray300\n          };\n        case \"deleted\":\n          return {\n            background: o.gray200,\n            textDecoration: \"line-through\",\n            opacity: \"0.5\"\n          };\n        default:\n          return {\n            background: o.gray200\n          };\n      }\n    };\n    return css(p({\n      display: \"inline-flex\",\n      fontFamily: o.fontStackPrimary,\n      alignItems: \"center\",\n      borderRadius: o.borderRadiusSmall,\n      border: \"none\",\n      padding: 0,\n      maxWidth: \"100%\"\n    }, e(t)));\n  };\nfunction h(t) {\n  return {\n    closeButton: H(),\n    label: L(),\n    icon: css({\n      fill: o.gray600,\n      verticalAlign: \"middle\",\n      outline: \"none\"\n    }),\n    dragIcon: css({\n      padding: o.spacingXs,\n      paddingRight: 0,\n      cursor: \"move\"\n    }),\n    pill: N(t)\n  };\n}\nvar v = n.forwardRef(function (t, e) {\n  var g = t,\n    r = g.label,\n    a = g.onClose,\n    _g$testId = g.testId,\n    x = _g$testId === void 0 ? \"cf-ui-pill\" : _g$testId,\n    d = g.onDrag,\n    C = g.className,\n    c = g.dragHandleComponent,\n    _g$variant = g.variant,\n    D = _g$variant === void 0 ? \"idle\" : _g$variant,\n    S = b(g, [\"label\", \"onClose\", \"testId\", \"onDrag\", \"className\", \"dragHandleComponent\", \"variant\"]),\n    l = h(D),\n    _n$useState = n.useState(!1),\n    _n$useState2 = _slicedToArray(_n$useState, 2),\n    I = _n$useState2[0],\n    m = _n$useState2[1],\n    k = n.useCallback(function (u) {\n      if (!u) return;\n      var _u$parentElement = u.parentElement,\n        T = _u$parentElement.scrollWidth,\n        w = _u$parentElement.offsetWidth;\n      m(T > w);\n    }, [m]);\n  return n.createElement(\"div\", p({\n    className: cx(l.pill, C),\n    \"data-test-id\": x,\n    onDrag: d,\n    ref: e\n  }, S), d && (c || n.createElement(\"span\", {\n    \"aria-label\": \"Drag handler\",\n    className: l.dragIcon\n  }, n.createElement(DragIcon, {\n    className: l.icon,\n    variant: \"muted\"\n  }))), n.createElement(Tooltip, {\n    content: r,\n    maxWidth: \"none\",\n    targetWrapperClassName: l.label,\n    isDisabled: !I\n  }, n.createElement(\"span\", {\n    ref: k\n  }, r)), a && n.createElement(Button, {\n    type: \"button\",\n    variant: \"transparent\",\n    startIcon: n.createElement(CloseIcon, {\n      \"aria-label\": \"Close\"\n    }),\n    \"aria-label\": \"Close\",\n    onClick: a,\n    className: l.closeButton\n  }));\n});\nv.displayName = \"Pill\";\nexport { v as Pill };","map":{"version":3,"names":["cx","css"],"sources":["/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-pill/src/Pill.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-pill/src/Pill.styles.ts"],"sourcesContent":["import React from 'react';\nimport { cx } from 'emotion';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Tooltip } from '@contentful/f36-tooltip';\nimport { DragIcon, CloseIcon } from '@contentful/f36-icons';\nimport { Button } from '@contentful/f36-button';\nimport { PillVariants } from './types';\nimport { getPillStyles } from './Pill.styles';\n\nexport type PillInternalProps = CommonProps & {\n  /**\n   * Text that will be shown on the pill\n   */\n  label: string;\n  /**\n   * Function that handles when the close icon is clicked. Close icon visibility depends on if this property is set.\n   */\n  onClose?: () => void;\n  /**\n   * Function that handles when the pill is dragged. Drag icon visibility depends on if this property is set.\n   */\n  onDrag?: () => void;\n  /**\n   * Custom component to be used as handler for the drag functionality.\n   */\n  dragHandleComponent?: React.ReactNode;\n  /**\n   * Determines style variation of Pill component\n   * @default idle\n   */\n  variant?: PillVariants;\n};\n\nexport type PillProps = PropsWithHTMLElement<PillInternalProps, 'div'>;\n\nexport const Pill = React.forwardRef<HTMLDivElement, ExpandProps<PillProps>>(\n  (props, ref) => {\n    const {\n      label,\n      onClose,\n      testId = 'cf-ui-pill',\n      onDrag,\n      className,\n      dragHandleComponent,\n      variant = 'idle',\n      ...otherProps\n    } = props;\n\n    const styles = getPillStyles(variant);\n    const [textIsTruncated, setTextIsTruncated] = React.useState(false);\n\n    const trackRefChange = React.useCallback(\n      (ref: HTMLDivElement | null) => {\n        if (!ref) {\n          return;\n        }\n        const { scrollWidth, offsetWidth } = ref.parentElement;\n        setTextIsTruncated(scrollWidth > offsetWidth);\n      },\n      [setTextIsTruncated],\n    );\n\n    return (\n      <div\n        className={cx(styles.pill, className)}\n        data-test-id={testId}\n        onDrag={onDrag}\n        ref={ref}\n        {...otherProps}\n      >\n        {onDrag &&\n          (dragHandleComponent ? (\n            dragHandleComponent\n          ) : (\n            <span aria-label=\"Drag handler\" className={styles.dragIcon}>\n              <DragIcon className={styles.icon} variant=\"muted\" />\n            </span>\n          ))}\n        <Tooltip\n          content={label}\n          maxWidth=\"none\"\n          targetWrapperClassName={styles.label}\n          isDisabled={!textIsTruncated}\n        >\n          <span ref={trackRefChange}>{label}</span>\n        </Tooltip>\n        {onClose && (\n          <Button\n            type=\"button\"\n            variant=\"transparent\"\n            startIcon={<CloseIcon aria-label=\"Close\" />}\n            aria-label=\"Close\"\n            onClick={onClose}\n            className={styles.closeButton}\n          />\n        )}\n      </div>\n    );\n  },\n);\n\nPill.displayName = 'Pill';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { PillVariants } from './types';\n\nconst getCloseButtonStyle = () => {\n  return css({\n    borderLeft: `1px solid ${tokens.gray400}`,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    padding: tokens.spacingXs,\n    minHeight: 'auto',\n    transition: `background ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault},\n    opacity ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n    '&:focus': {\n      boxShadow: tokens.glowMuted,\n      borderLeftColor: tokens.gray300,\n    },\n    '&:hover, &:focus, &:active': {\n      backgroundColor: tokens.gray300,\n    },\n  });\n};\n\nconst getLabelStyle = () => {\n  return css({\n    color: tokens.gray700,\n    lineHeight: tokens.lineHeightM,\n    padding: tokens.spacingXs,\n    fontSize: tokens.fontSizeM,\n    flexGrow: 2,\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  });\n};\n\nconst getPillStyle = (variant: PillVariants) => {\n  const variantStyle = (variant: PillVariants) => {\n    switch (variant) {\n      case 'active':\n        return {\n          background: tokens.gray300,\n        };\n      case 'deleted':\n        return {\n          background: tokens.gray200,\n          textDecoration: 'line-through',\n          opacity: '0.5',\n        };\n      default:\n        return {\n          background: tokens.gray200,\n        };\n    }\n  };\n\n  return css({\n    display: 'inline-flex',\n    fontFamily: tokens.fontStackPrimary,\n    alignItems: 'center',\n    borderRadius: tokens.borderRadiusSmall,\n    border: 'none',\n    padding: 0,\n    maxWidth: '100%',\n    ...variantStyle(variant),\n  });\n};\n\nexport function getPillStyles(variant: PillVariants) {\n  return {\n    closeButton: getCloseButtonStyle(),\n    label: getLabelStyle(),\n    icon: css({\n      fill: tokens.gray600,\n      verticalAlign: 'middle',\n      outline: 'none',\n    }),\n    dragIcon: css({\n      padding: tokens.spacingXs,\n      paddingRight: 0,\n      cursor: 'move',\n    }),\n    pill: getPillStyle(variant),\n  };\n}\n"],"mappings":";;;ACWuE,SAAAA,EAAA,EAAAC,GAClD"},"metadata":{},"sourceType":"module","externalDependencies":[]}