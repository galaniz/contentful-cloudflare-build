{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport s, { useCallback } from 'react';\nimport { useId, Box } from '@contentful/f36-core';\nimport A from '@contentful/f36-tokens';\nimport { TableRow, TableCell } from '@contentful/f36-table';\nvar Y = Object.defineProperty;\nvar u = Object.getOwnPropertySymbols;\nvar D = Object.prototype.hasOwnProperty,\n  v = Object.prototype.propertyIsEnumerable;\nvar $ = function $(e, o, t) {\n    return o in e ? Y(e, o, {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: t\n    }) : e[o] = t;\n  },\n  x = function x(e, o) {\n    for (var t in o || (o = {})) D.call(o, t) && $(e, t, o[t]);\n    if (u) {\n      var _iterator = _createForOfIteratorHelper(u(o)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var t = _step.value;\n          v.call(o, t) && $(e, t, o[t]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    return e;\n  };\nvar S = function S(e, o) {\n  var t = {};\n  for (var r in e) D.call(e, r) && o.indexOf(r) < 0 && (t[r] = e[r]);\n  if (e != null && u) {\n    var _iterator2 = _createForOfIteratorHelper(u(e)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var r = _step2.value;\n        o.indexOf(r) < 0 && v.call(e, r) && (t[r] = e[r]);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return t;\n};\nvar c = function c(n) {\n  var l = n,\n    _l$lineHeight = l.lineHeight,\n    e = _l$lineHeight === void 0 ? 16 : _l$lineHeight,\n    _l$marginBottom = l.marginBottom,\n    o = _l$marginBottom === void 0 ? 8 : _l$marginBottom,\n    _l$numberOfLines = l.numberOfLines,\n    t = _l$numberOfLines === void 0 ? 2 : _l$numberOfLines,\n    _l$offsetLeft = l.offsetLeft,\n    r = _l$offsetLeft === void 0 ? 0 : _l$offsetLeft,\n    _l$offsetTop = l.offsetTop,\n    m = _l$offsetTop === void 0 ? 0 : _l$offsetTop,\n    p = S(l, [\"lineHeight\", \"marginBottom\", \"numberOfLines\", \"offsetLeft\", \"offsetTop\"]);\n  return s.createElement(i.Text, x({\n    lineHeight: e,\n    marginBottom: o,\n    numberOfLines: t > 0 ? t : 1,\n    offsetLeft: r,\n    offsetTop: m\n  }, p));\n};\nvar d = function d(V) {\n  var w = V,\n    e = w.children,\n    _w$testId = w.testId,\n    o = _w$testId === void 0 ? \"cf-ui-skeleton-form\" : _w$testId,\n    _w$ariaLabel = w.ariaLabel,\n    t = _w$ariaLabel === void 0 ? \"Loading component...\" : _w$ariaLabel,\n    _w$width = w.width,\n    r = _w$width === void 0 ? \"100%\" : _w$width,\n    _w$height = w.height,\n    m = _w$height === void 0 ? \"100%\" : _w$height,\n    p = w.preserveAspectRatio,\n    _w$backgroundColor = w.backgroundColor,\n    n = _w$backgroundColor === void 0 ? \"#e5ebed\" : _w$backgroundColor,\n    _w$backgroundOpacity = w.backgroundOpacity,\n    l = _w$backgroundOpacity === void 0 ? 1 : _w$backgroundOpacity,\n    _w$isAnimated = w.isAnimated,\n    a = _w$isAnimated === void 0 ? !0 : _w$isAnimated,\n    _w$speed = w.speed,\n    f = _w$speed === void 0 ? 2 : _w$speed,\n    _w$foregroundColor = w.foregroundColor,\n    k = _w$foregroundColor === void 0 ? \"#f7f9fa\" : _w$foregroundColor,\n    _w$foregroundOpacity = w.foregroundOpacity,\n    q = _w$foregroundOpacity === void 0 ? 1 : _w$foregroundOpacity,\n    _w$svgWidth = w.svgWidth,\n    H = _w$svgWidth === void 0 ? \"100%\" : _w$svgWidth,\n    _w$svgHeight = w.svgHeight,\n    G = _w$svgHeight === void 0 ? \"100%\" : _w$svgHeight,\n    _ = w.clipId,\n    E = w.gradientId,\n    F = w.animateId,\n    W = S(w, [\"children\", \"testId\", \"ariaLabel\", \"width\", \"height\", \"preserveAspectRatio\", \"backgroundColor\", \"backgroundOpacity\", \"isAnimated\", \"speed\", \"foregroundColor\", \"foregroundOpacity\", \"svgWidth\", \"svgHeight\", \"clipId\", \"gradientId\", \"animateId\"]);\n  var O = useId(_, \"cf-ui-skeleton-clip\"),\n    B = useId(E, \"cf-ui-skeleton-clip-gradient\"),\n    X = useId(void 0, \"animation\"),\n    h = F || X;\n  return s.createElement(Box, x({\n    as: \"svg\",\n    display: \"block\",\n    role: \"img\",\n    \"aria-label\": t,\n    preserveAspectRatio: p,\n    width: H,\n    height: G,\n    testId: o\n  }, W), t ? s.createElement(\"title\", null, t) : null, s.createElement(\"rect\", {\n    x: \"0\",\n    y: \"0\",\n    width: r,\n    height: m,\n    clipPath: \"url(#\".concat(O, \")\"),\n    style: {\n      fill: \"url(#\".concat(B, \")\")\n    }\n  }), s.createElement(\"defs\", null, s.createElement(\"clipPath\", {\n    id: O\n  }, e), s.createElement(\"linearGradient\", {\n    id: B\n  }, s.createElement(\"stop\", {\n    offset: \"0%\",\n    stopColor: n,\n    stopOpacity: l\n  }, a && s.createElement(\"animate\", {\n    id: h,\n    attributeName: \"stop-color\",\n    values: \"\".concat(n, \"; \").concat(k, \"; \").concat(n),\n    dur: \"\".concat(f, \"s\"),\n    repeatCount: \"indefinite\"\n  })), s.createElement(\"stop\", {\n    offset: \"50%\",\n    stopColor: k,\n    stopOpacity: q\n  }, a && s.createElement(\"animate\", {\n    attributeName: \"stop-color\",\n    values: \"\".concat(n, \"; \").concat(k, \"; \").concat(n),\n    begin: \"\".concat(h, \".begin+0.25s\"),\n    dur: \"\".concat(f, \"s\"),\n    repeatCount: \"indefinite\"\n  })), s.createElement(\"stop\", {\n    offset: \"100%\",\n    stopColor: n,\n    stopOpacity: l\n  }, a && s.createElement(\"animate\", {\n    attributeName: \"stop-color\",\n    begin: \"\".concat(h, \".begin+0.5s\"),\n    values: \"\".concat(n, \"; \").concat(k, \"; \").concat(n),\n    dur: \"\".concat(f, \"s\"),\n    repeatCount: \"indefinite\"\n  })))));\n};\nd.displayName = \"SkeletonContainer\";\nvar g = function g(l) {\n  var a = l,\n    _a$lineHeight = a.lineHeight,\n    e = _a$lineHeight === void 0 ? 21 : _a$lineHeight,\n    _a$marginBottom = a.marginBottom,\n    o = _a$marginBottom === void 0 ? 20 : _a$marginBottom,\n    _a$numberOfLines = a.numberOfLines,\n    t = _a$numberOfLines === void 0 ? 1 : _a$numberOfLines,\n    _a$offsetLeft = a.offsetLeft,\n    r = _a$offsetLeft === void 0 ? 0 : _a$offsetLeft,\n    _a$offsetTop = a.offsetTop,\n    m = _a$offsetTop === void 0 ? 0 : _a$offsetTop,\n    _a$width = a.width,\n    p = _a$width === void 0 ? 100 : _a$width,\n    n = S(a, [\"lineHeight\", \"marginBottom\", \"numberOfLines\", \"offsetLeft\", \"offsetTop\", \"width\"]);\n  return s.createElement(i.Text, x({\n    lineHeight: e,\n    marginBottom: o,\n    numberOfLines: t,\n    offsetLeft: r,\n    offsetTop: m,\n    width: p\n  }, n));\n};\ng.displayName = \"SkeletonDisplayText\";\nvar y = function y(a) {\n  var f = a,\n    _f$testId = f.testId,\n    e = _f$testId === void 0 ? \"cf-ui-skeleton-image\" : _f$testId,\n    o = f.offsetLeft,\n    t = f.offsetTop,\n    _f$width = f.width,\n    r = _f$width === void 0 ? 70 : _f$width,\n    _f$height = f.height,\n    m = _f$height === void 0 ? 70 : _f$height,\n    _f$radiusX = f.radiusX,\n    p = _f$radiusX === void 0 ? A.borderRadiusSmall : _f$radiusX,\n    _f$radiusY = f.radiusY,\n    n = _f$radiusY === void 0 ? A.borderRadiusSmall : _f$radiusY,\n    l = S(f, [\"testId\", \"offsetLeft\", \"offsetTop\", \"width\", \"height\", \"radiusX\", \"radiusY\"]);\n  return s.createElement(\"rect\", x({\n    x: o,\n    y: t,\n    rx: p,\n    ry: n,\n    width: r,\n    height: m,\n    \"data-test-id\": e\n  }, l));\n};\ny.displayName = \"SkeletonImage\";\nvar R = function R() {\n  return s.createElement(TableCell, null, s.createElement(i.Container, {\n    svgHeight: 16\n  }, s.createElement(i.BodyText, {\n    numberOfLines: 1\n  })));\n};\nvar N = function N(_ref) {\n  var _ref$columnCount = _ref.columnCount,\n    e = _ref$columnCount === void 0 ? 5 : _ref$columnCount,\n    _ref$rowCount = _ref.rowCount,\n    o = _ref$rowCount === void 0 ? 1 : _ref$rowCount;\n  return s.createElement(s.Fragment, null, Array.from(Array(o)).map(function (t, r) {\n    return s.createElement(TableRow, {\n      key: r\n    }, Array.from(Array(e)).map(function (m, p) {\n      return s.createElement(R, {\n        key: p\n      });\n    }));\n  }));\n};\nvar b = function b(_ref2) {\n  var _ref2$numberOfLines = _ref2.numberOfLines,\n    e = _ref2$numberOfLines === void 0 ? 1 : _ref2$numberOfLines,\n    _ref2$offsetLeft = _ref2.offsetLeft,\n    o = _ref2$offsetLeft === void 0 ? 0 : _ref2$offsetLeft,\n    _ref2$offsetTop = _ref2.offsetTop,\n    t = _ref2$offsetTop === void 0 ? 0 : _ref2$offsetTop,\n    _ref2$lineHeight = _ref2.lineHeight,\n    r = _ref2$lineHeight === void 0 ? 21 : _ref2$lineHeight,\n    _ref2$marginBottom = _ref2.marginBottom,\n    m = _ref2$marginBottom === void 0 ? 20 : _ref2$marginBottom,\n    _ref2$radiusX = _ref2.radiusX,\n    p = _ref2$radiusX === void 0 ? A.borderRadiusSmall : _ref2$radiusX,\n    _ref2$radiusY = _ref2.radiusY,\n    n = _ref2$radiusY === void 0 ? A.borderRadiusSmall : _ref2$radiusY,\n    l = _ref2.width;\n  var a = useCallback(function (f) {\n    return l || (f ? \"80%\" : \"100%\");\n  }, [l]);\n  return s.createElement(s.Fragment, null, Array.from(Array(e)).map(function (f, k) {\n    return s.createElement(\"rect\", {\n      key: \"skeleton-display-text-\".concat(k),\n      x: o,\n      y: k * (+r + +m) + +t,\n      rx: p,\n      ry: n,\n      width: a(e > 1 && e - k === 1),\n      height: r\n    });\n  }));\n};\nb.displayName = \"SkeletonText\";\nvar i = {};\ni.BodyText = c;\ni.Container = d;\ni.DisplayText = g;\ni.Image = y;\ni.Row = N;\ni.Text = b;\nexport { i as Skeleton, c as SkeletonBodyText, d as SkeletonContainer, g as SkeletonDisplayText, y as SkeletonImage, N as SkeletonRow, b as SkeletonText };","map":{"version":3,"names":[],"sources":["/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-skeleton/src/SkeletonBodyText/SkeletonBodyText.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-skeleton/src/SkeletonContainer/SkeletonContainer.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-skeleton/src/SkeletonDisplayText/SkeletonDisplayText.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-skeleton/src/SkeletonImage/SkeletonImage.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-skeleton/src/SkeletonRow/SkeletonRow.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-skeleton/src/SkeletonRow/SkeletonTableCell/SkeletonTableCell.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-skeleton/src/SkeletonText/SkeletonText.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-skeleton/src/CompoundSkeleton.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Skeleton } from '../index';\nimport type { SkeletonTextProps } from '../SkeletonText/SkeletonText';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SkeletonBodyTextProps extends SkeletonTextProps {}\n\nexport const SkeletonBodyText = ({\n  lineHeight = 16,\n  marginBottom = 8,\n  numberOfLines = 2,\n  offsetLeft = 0,\n  offsetTop = 0,\n  ...otherProps\n}: SkeletonBodyTextProps) => {\n  return (\n    <Skeleton.Text\n      lineHeight={lineHeight}\n      marginBottom={marginBottom}\n      numberOfLines={\n        numberOfLines! > 0 // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          ? numberOfLines\n          : 1\n      }\n      offsetLeft={offsetLeft}\n      offsetTop={offsetTop}\n      {...otherProps}\n    />\n  );\n};\n","import React from 'react';\nimport { Box, useId, type CommonProps } from '@contentful/f36-core';\n\nexport interface SkeletonContainerProps extends CommonProps {\n  /**\n   * Background color of the skeleton\n   */\n  backgroundColor?: string;\n  /**\n   * Background opacity of the skeleton\n   */\n  backgroundOpacity?: number;\n  /**\n   * Whether skeleton has animation or not\n   */\n  isAnimated?: boolean;\n  /**\n   * Speed of the animation\n   */\n  speed?: number | string;\n  /**\n   * Color of the foreground skeleton items\n   */\n  foregroundColor?: string;\n  /**\n   * Opacity of the foreground skeleton items\n   */\n  foregroundOpacity?: number;\n  /**\n   * Width of the SVG element\n   */\n  svgWidth?: string | number;\n  /**\n   * Height of the SVG element\n   */\n  svgHeight?: string | number;\n  /**\n   * Label attribute\n   */\n  ariaLabel?: string;\n  width?: number | string;\n  height?: number | string;\n  clipId?: string;\n  gradientId?: string;\n  animateId?: string;\n  preserveAspectRatio?: string;\n  children: React.ReactNode;\n}\n\nexport const SkeletonContainer = ({\n  children,\n  testId = 'cf-ui-skeleton-form',\n  ariaLabel = 'Loading component...',\n  width = '100%',\n  height = '100%',\n  preserveAspectRatio,\n  backgroundColor = '#e5ebed',\n  backgroundOpacity = 1,\n  isAnimated = true,\n  speed = 2,\n  foregroundColor = '#f7f9fa',\n  foregroundOpacity = 1,\n  svgWidth = '100%',\n  svgHeight = '100%',\n  clipId,\n  gradientId,\n  animateId,\n  ...otherProps\n}: SkeletonContainerProps) => {\n  const uniqueClipId = useId(clipId, 'cf-ui-skeleton-clip');\n  const uniqueGradientId = useId(gradientId, 'cf-ui-skeleton-clip-gradient');\n  const randomAnimateId = useId(undefined, 'animation');\n  const uniqueAnimateId = animateId || randomAnimateId;\n\n  return (\n    <Box\n      as=\"svg\"\n      display=\"block\"\n      role=\"img\"\n      aria-label={ariaLabel}\n      preserveAspectRatio={preserveAspectRatio}\n      width={svgWidth}\n      height={svgHeight}\n      testId={testId}\n      {...otherProps}\n    >\n      {ariaLabel ? <title>{ariaLabel}</title> : null}\n      <rect\n        x=\"0\"\n        y=\"0\"\n        width={width}\n        height={height}\n        clipPath={`url(#${uniqueClipId})`}\n        style={{ fill: `url(#${uniqueGradientId})` }}\n      />\n\n      <defs>\n        <clipPath id={uniqueClipId}>{children}</clipPath>\n\n        <linearGradient id={uniqueGradientId}>\n          <stop\n            offset=\"0%\"\n            stopColor={backgroundColor}\n            stopOpacity={backgroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                id={uniqueAnimateId}\n                attributeName=\"stop-color\"\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n          <stop\n            offset=\"50%\"\n            stopColor={foregroundColor}\n            stopOpacity={foregroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                attributeName=\"stop-color\"\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                begin={`${uniqueAnimateId}.begin+0.25s`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n          <stop\n            offset=\"100%\"\n            stopColor={backgroundColor}\n            stopOpacity={backgroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                attributeName=\"stop-color\"\n                begin={`${uniqueAnimateId}.begin+0.5s`}\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n        </linearGradient>\n      </defs>\n    </Box>\n  );\n};\n\nSkeletonContainer.displayName = 'SkeletonContainer';\n","import React from 'react';\n\nimport { Skeleton } from '../index';\nimport type { SkeletonTextProps } from '../SkeletonText/SkeletonText';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SkeletonDisplayTextProps extends SkeletonTextProps {}\n\nexport const SkeletonDisplayText = ({\n  lineHeight = 21,\n  marginBottom = 20,\n  numberOfLines = 1,\n  offsetLeft = 0,\n  offsetTop = 0,\n  width = 100,\n  ...otherProps\n}: SkeletonDisplayTextProps): React.ReactElement => {\n  return (\n    <Skeleton.Text\n      lineHeight={lineHeight}\n      marginBottom={marginBottom}\n      numberOfLines={numberOfLines}\n      offsetLeft={offsetLeft}\n      offsetTop={offsetTop}\n      width={width}\n      {...otherProps}\n    />\n  );\n};\n\nSkeletonDisplayText.displayName = 'SkeletonDisplayText';\n","import tokens from '@contentful/f36-tokens';\nimport React from 'react';\n\ntype stringOrNumber = string | number;\n\nexport interface SkeletonImageProps {\n  width?: stringOrNumber;\n  height?: stringOrNumber;\n  radiusX?: stringOrNumber;\n  radiusY?: stringOrNumber;\n  offsetLeft?: stringOrNumber;\n  offsetTop?: stringOrNumber;\n  testId?: string;\n}\n\nexport const SkeletonImage = ({\n  testId = 'cf-ui-skeleton-image',\n  offsetLeft,\n  offsetTop,\n  width = 70,\n  height = 70,\n  radiusX = tokens.borderRadiusSmall,\n  radiusY = tokens.borderRadiusSmall,\n  ...otherProps\n}: SkeletonImageProps): React.ReactElement => {\n  return (\n    <rect\n      x={offsetLeft}\n      y={offsetTop}\n      rx={radiusX}\n      ry={radiusY}\n      width={width}\n      height={height}\n      data-test-id={testId}\n      {...otherProps}\n    />\n  );\n};\n\nSkeletonImage.displayName = 'SkeletonImage';\n","import React from 'react';\nimport { TableRow } from '@contentful/f36-table';\n\nimport { SkeletonTableCell } from './SkeletonTableCell/SkeletonTableCell';\n\nexport interface SkeletonRowProps {\n  /** Defines the number of rows to be rendered */\n  rowCount?: number;\n  /** Defines the number of columns to be rendered */\n  columnCount?: number;\n}\n\nexport const SkeletonRow = ({\n  columnCount = 5,\n  rowCount = 1,\n}: SkeletonRowProps) => {\n  return (\n    <>\n      {Array.from(Array(rowCount)).map((_, rowIndex) => (\n        <TableRow key={rowIndex}>\n          {Array.from(Array(columnCount)).map((_, cellIndex) => (\n            <SkeletonTableCell key={cellIndex} />\n          ))}\n        </TableRow>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { TableCell } from '@contentful/f36-table';\n\nimport { Skeleton } from '../../index';\n\nexport const SkeletonTableCell = () => {\n  return (\n    <TableCell>\n      <Skeleton.Container\n        svgHeight={16} // This is equal to the default height of a SkeletonText line, if no value is passed the svg will be bigger than the line\n      >\n        <Skeleton.BodyText numberOfLines={1} />\n      </Skeleton.Container>\n    </TableCell>\n  );\n};\n","import tokens from '@contentful/f36-tokens';\nimport React, { useCallback } from 'react';\n\ntype stringOrNumber = string | number;\n\nexport interface SkeletonTextProps {\n  /**\n   * A number of skeleton likes\n   */\n  numberOfLines?: number;\n  /**\n   * A distance between top of the container and the first line (in pixels)\n   */\n  offsetTop?: stringOrNumber;\n  /**\n   * A distance between left of the container and the beginning of lines (in pixels)\n   */\n  offsetLeft?: stringOrNumber;\n  /**\n   * A height of a one line (in pixels)\n   */\n  lineHeight?: stringOrNumber;\n  /**\n   * Spacing between lines (in pixels)\n   */\n  marginBottom?: stringOrNumber;\n  /**\n   * X-axis border radius (in number)\n   */\n  radiusX?: stringOrNumber;\n  /**\n   * Y-axis border radius (in number)\n   */\n  radiusY?: stringOrNumber;\n  /**\n   * A width of a line\n   */\n  width?: stringOrNumber;\n}\n\nexport const SkeletonText = ({\n  numberOfLines = 1,\n  offsetLeft = 0,\n  offsetTop = 0,\n  lineHeight = 21,\n  marginBottom = 20,\n  radiusX = tokens.borderRadiusSmall,\n  radiusY = tokens.borderRadiusSmall,\n  width,\n}: SkeletonTextProps) => {\n  const getLineWidth = useCallback(\n    (lastLine: boolean) => {\n      if (width) {\n        return width;\n      }\n\n      return lastLine ? '80%' : '100%';\n    },\n    [width],\n  );\n\n  return (\n    <React.Fragment>\n      {Array.from(Array(numberOfLines)).map((_, index) => (\n        <rect\n          key={`skeleton-display-text-${index}`} // eslint-disable-line\n          x={offsetLeft}\n          y={\n            index * (+lineHeight! + +marginBottom!) + +offsetTop! // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          }\n          rx={radiusX}\n          ry={radiusY}\n          width={getLineWidth(\n            numberOfLines! > 1 && numberOfLines! - index === 1, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          )}\n          height={lineHeight}\n        />\n      ))}\n    </React.Fragment>\n  );\n};\n\nSkeletonText.displayName = 'SkeletonText';\n","import { SkeletonBodyText } from './SkeletonBodyText/SkeletonBodyText';\nimport { SkeletonContainer } from './SkeletonContainer/SkeletonContainer';\nimport { SkeletonDisplayText } from './SkeletonDisplayText/SkeletonDisplayText';\nimport { SkeletonImage } from './SkeletonImage/SkeletonImage';\nimport { SkeletonRow } from './SkeletonRow/SkeletonRow';\nimport { SkeletonText } from './SkeletonText/SkeletonText';\n\ntype CompoundSkeleton = {\n  BodyText: typeof SkeletonBodyText;\n  Container: typeof SkeletonContainer;\n  DisplayText: typeof SkeletonDisplayText;\n  Image: typeof SkeletonImage;\n  Row: typeof SkeletonRow;\n  Text: typeof SkeletonText;\n};\n\nexport const Skeleton = {} as CompoundSkeleton;\n\nSkeleton.BodyText = SkeletonBodyText;\nSkeleton.Container = SkeletonContainer;\nSkeleton.DisplayText = SkeletonDisplayText;\nSkeleton.Image = SkeletonImage;\nSkeleton.Row = SkeletonRow;\nSkeleton.Text = SkeletonText;\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}