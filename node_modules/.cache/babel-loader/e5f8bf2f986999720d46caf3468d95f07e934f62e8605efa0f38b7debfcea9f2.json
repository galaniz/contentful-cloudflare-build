{"ast":null,"code":"import _regeneratorRuntime from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport d, { useState, useCallback } from 'react';\nimport { CopyIcon } from '@contentful/f36-icons';\nimport { Tooltip } from '@contentful/f36-tooltip';\nimport { Button } from '@contentful/f36-button';\nimport { cx, css } from 'emotion';\nvar L = Object.defineProperty,\n  F = Object.defineProperties;\nvar N = Object.getOwnPropertyDescriptors;\nvar m = Object.getOwnPropertySymbols;\nvar h = Object.prototype.hasOwnProperty,\n  E = Object.prototype.propertyIsEnumerable;\nvar P = function P(t, o, e) {\n    return o in t ? L(t, o, {\n      enumerable: !0,\n      configurable: !0,\n      writable: !0,\n      value: e\n    }) : t[o] = e;\n  },\n  f = function f(t, o) {\n    for (var e in o || (o = {})) h.call(o, e) && P(t, e, o[e]);\n    if (m) {\n      var _iterator = _createForOfIteratorHelper(m(o)),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var e = _step.value;\n          E.call(o, e) && P(t, e, o[e]);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n    return t;\n  },\n  C = function C(t, o) {\n    return F(t, N(o));\n  };\nvar g = function g(t, o) {\n  var e = {};\n  for (var n in t) h.call(t, n) && o.indexOf(n) < 0 && (e[n] = t[n]);\n  if (t != null && m) {\n    var _iterator2 = _createForOfIteratorHelper(m(t)),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var n = _step2.value;\n        o.indexOf(n) < 0 && E.call(t, n) && (e[n] = t[n]);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n  return e;\n};\nvar T = function T(t, o, e) {\n  return new Promise(function (n, i) {\n    var s = function s(r) {\n        try {\n          a(e.next(r));\n        } catch (l) {\n          i(l);\n        }\n      },\n      c = function c(r) {\n        try {\n          a(e.throw(r));\n        } catch (l) {\n          i(l);\n        }\n      },\n      a = function a(r) {\n        return r.done ? n(r.value) : Promise.resolve(r.value).then(s, c);\n      };\n    a((e = e.apply(t, o)).next());\n  });\n};\nvar w = function w(_ref) {\n  var t = _ref.size;\n  var o = t === \"small\" ? \"32px\" : \"40px\";\n  return {\n    button: css({\n      height: o,\n      minHeight: \"auto\",\n      minWidth: \"auto\",\n      width: o\n    })\n  };\n};\nfunction H(A, M) {\n  var _this = this;\n  var B = A,\n    t = B.className,\n    _B$isDisabled = B.isDisabled,\n    o = _B$isDisabled === void 0 ? !1 : _B$isDisabled,\n    _B$isLoading = B.isLoading,\n    e = _B$isLoading === void 0 ? !1 : _B$isLoading,\n    n = B.label,\n    i = B.onBlur,\n    s = B.onCopy,\n    _B$size = B.size,\n    c = _B$size === void 0 ? \"medium\" : _B$size,\n    _B$testId = B.testId,\n    a = _B$testId === void 0 ? \"cf-ui-copy-button\" : _B$testId,\n    _B$tooltipCopiedText = B.tooltipCopiedText,\n    r = _B$tooltipCopiedText === void 0 ? \"Copied!\" : _B$tooltipCopiedText,\n    l = B.tooltipProps,\n    _B$tooltipText = B.tooltipText,\n    k = _B$tooltipText === void 0 ? \"Copy to clipboard\" : _B$tooltipText,\n    u = B.value,\n    I = g(B, [\"className\", \"isDisabled\", \"isLoading\", \"label\", \"onBlur\", \"onCopy\", \"size\", \"testId\", \"tooltipCopiedText\", \"tooltipProps\", \"tooltipText\", \"value\"]);\n  var z = w({\n      size: c\n    }),\n    _useState = useState(!1),\n    _useState2 = _slicedToArray(_useState, 2),\n    y = _useState2[0],\n    x = _useState2[1],\n    S = useCallback(function () {\n      return T(_this, null, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var p, v;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return window.navigator.clipboard.writeText(u);\n            case 3:\n              _context.next = 14;\n              break;\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              p = document.createElement(\"input\");\n              p.style.display = \"none\", document.body.appendChild(p), p.value = u, p.focus(), p.select();\n              v = document.execCommand(\"copy\");\n              if (!(v === \"unsuccessful\")) {\n                _context.next = 12;\n                break;\n              }\n              throw new Error(\"Unable to copy value\", {\n                cause: v\n              });\n            case 12:\n              p.remove();\n              return _context.abrupt(\"return\");\n            case 14:\n              s == null || s(u), x(!0);\n            case 15:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0, 5]]);\n      }));\n    }, [s, u]),\n    D = function D(b) {\n      y && x(!1), i == null || i(b);\n    };\n  return d.createElement(Tooltip, C(f({\n    content: y ? r : k\n  }, l), {\n    isDisabled: o\n  }), d.createElement(Button, C(f({\n    \"aria-label\": y ? \"Value copied to clipboard\" : n != null ? n : \"Copy to clipboard\",\n    \"aria-live\": \"assertive\",\n    className: cx(z.button, t),\n    isDisabled: e || o,\n    isLoading: e,\n    onBlur: D,\n    testId: a\n  }, I), {\n    onClick: S,\n    ref: M,\n    startIcon: d.createElement(CopyIcon, {\n      variant: \"muted\",\n      size: c === \"small\" ? \"tiny\" : \"small\"\n    }),\n    variant: \"secondary\"\n  })));\n}\nH.displayName = \"CopyButton\";\nvar q = d.forwardRef(H);\nexport { q as CopyButton };","map":{"version":3,"names":[],"sources":["/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-copybutton/src/CopyButton.tsx","/Users/gracielaalaniz/Documents/cloudflare-build/node_modules/@contentful/f36-copybutton/src/CopyButton.styles.ts"],"sourcesContent":["import React, {\n  useCallback,\n  useState,\n  type MouseEventHandler,\n  type FocusEventHandler,\n} from 'react';\nimport { CopyIcon } from '@contentful/f36-icons';\nimport type { ExpandProps } from '@contentful/f36-core';\nimport { Tooltip, type TooltipProps } from '@contentful/f36-tooltip';\nimport { Button, type ButtonProps } from '@contentful/f36-button';\nimport { getCopyButtonStyles } from './CopyButton.styles';\nimport { cx } from 'emotion';\n\nexport type CopyButtonProps = Omit<\n  ButtonProps,\n  | 'children'\n  | 'endIcon'\n  | 'onCopy'\n  | 'onClick'\n  | 'startIcon'\n  | 'isDisabled'\n  | 'size'\n  | 'value'\n  | 'variant'\n> & {\n  /**\n   * Function that gets called when the button is clicked\n   */\n  onCopy?: (string) => void;\n  /**\n   * Text to be shown when the button is clicked\n   * @default Copied!\n   */\n  tooltipCopiedText?: string;\n  /**\n   * Text to be shown when button is hovered or focused\n   * @default Copy to clipboard\n   */\n  tooltipText?: string;\n  /**\n   * Props that are passed to the tooltip component\n   */\n  tooltipProps?: Omit<TooltipProps, 'content' | 'children'>;\n  /**\n   * Label to be used on aria-label for the button\n   * @default Copy to clipboard\n   */\n  label?: string;\n  /**\n   * Allows to disable the copy button, when true the tooltip would not be shown\n   * @default false\n   */\n  isDisabled?: boolean;\n  /**\n   * Allows setting size of the copy button to small\n   * @default medium\n   */\n  size?: 'small' | 'medium';\n  /**\n   * Value that will be copied to clipboard when the button is clicked\n   */\n  value: string;\n};\n\nfunction _CopyButton(\n  {\n    className,\n    isDisabled = false,\n    isLoading = false,\n    label,\n    onBlur,\n    onCopy,\n    size = 'medium',\n    testId = 'cf-ui-copy-button',\n    tooltipCopiedText = 'Copied!',\n    tooltipProps,\n    tooltipText = 'Copy to clipboard',\n    value,\n    ...otherProps\n  }: ExpandProps<CopyButtonProps>,\n  ref: React.Ref<HTMLButtonElement>,\n) {\n  const styles = getCopyButtonStyles({ size });\n  const [copied, setCopied] = useState(false);\n\n  const handleClick = useCallback<\n    MouseEventHandler<HTMLButtonElement>\n  >(async () => {\n    try {\n      await window.navigator.clipboard.writeText(value);\n    } catch (error) {\n      // Chrome requires specific permissions on iframes using the async clipboard\n      // API. We can't control that so we fall back to this\n      const input = document.createElement('input');\n      input.style.display = 'none';\n      document.body.appendChild(input);\n      input.value = value;\n      input.focus();\n      input.select();\n      const result = document.execCommand('copy');\n\n      // @ts-expect-error -- The return type of `execCommand` can also be string\n      if (result === 'unsuccessful') {\n        throw new Error('Unable to copy value', { cause: result });\n      }\n      input.remove();\n\n      return;\n    }\n\n    onCopy?.(value);\n    setCopied(true);\n  }, [onCopy, value]);\n\n  const handleBlur: FocusEventHandler<HTMLButtonElement> = (event) => {\n    if (copied) {\n      setCopied(false);\n    }\n\n    onBlur?.(event);\n  };\n\n  return (\n    <Tooltip\n      content={copied ? tooltipCopiedText : tooltipText}\n      {...tooltipProps}\n      isDisabled={isDisabled}\n    >\n      <Button\n        aria-label={\n          copied ? 'Value copied to clipboard' : label ?? `Copy to clipboard`\n        }\n        aria-live=\"assertive\"\n        className={cx(styles.button, className)}\n        isDisabled={isLoading || isDisabled}\n        isLoading={isLoading}\n        onBlur={handleBlur}\n        testId={testId}\n        {...otherProps}\n        onClick={handleClick}\n        ref={ref}\n        startIcon={\n          <CopyIcon\n            variant=\"muted\"\n            size={size === 'small' ? 'tiny' : 'small'}\n          />\n        }\n        variant=\"secondary\"\n      />\n    </Tooltip>\n  );\n}\n\n_CopyButton.displayName = 'CopyButton';\n\nexport const CopyButton = React.forwardRef(_CopyButton);\n","import { css } from 'emotion';\nimport { CopyButtonProps } from './CopyButton';\n\nexport const getCopyButtonStyles = ({\n  size,\n}: Pick<CopyButtonProps, 'size'>) => {\n  const buttonSize = size === 'small' ? '32px' : '40px';\n\n  return {\n    button: css({\n      height: buttonSize,\n      minHeight: 'auto',\n      minWidth: 'auto',\n      width: buttonSize,\n    }),\n  };\n};\n"],"mappings":""},"metadata":{},"sourceType":"module","externalDependencies":[]}